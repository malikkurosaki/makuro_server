
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Content
 * 
 */
export type Content = {
  id: number
  judul: string
  harga: number
  keterangan: string
}

/**
 * Model Gambar
 * 
 */
export type Gambar = {
  id: number
  destination: string
  filename: string
  path: string
  contentId: number
}

/**
 * Model Postingan
 * 
 */
export type Postingan = {
  id: number
  tanggal: Date
  contentId: number
  groupId: string
  userId: number
  postingId: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  data: string
}

/**
 * Model SessionBrowser
 * 
 */
export type SessionBrowser = {
  id: number
}

/**
 * Model ShareKeBanyak
 * 
 */
export type ShareKeBanyak = {
  id: number
  groupName: string
  tanggal: Date
  userId: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string
  email: string
  password: string
  active: boolean
  desc: string | null
}

/**
 * Model UserGroup
 * 
 */
export type UserGroup = {
  groupId: string
  name: string
  url: string
  userId: number
  jualBeli: boolean | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Contents
 * const contents = await prisma.content.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Contents
   * const contents = await prisma.content.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.content`: Exposes CRUD operations for the **Content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.ContentDelegate<GlobalReject>;

  /**
   * `prisma.gambar`: Exposes CRUD operations for the **Gambar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gambars
    * const gambars = await prisma.gambar.findMany()
    * ```
    */
  get gambar(): Prisma.GambarDelegate<GlobalReject>;

  /**
   * `prisma.postingan`: Exposes CRUD operations for the **Postingan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Postingans
    * const postingans = await prisma.postingan.findMany()
    * ```
    */
  get postingan(): Prisma.PostinganDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.sessionBrowser`: Exposes CRUD operations for the **SessionBrowser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionBrowsers
    * const sessionBrowsers = await prisma.sessionBrowser.findMany()
    * ```
    */
  get sessionBrowser(): Prisma.SessionBrowserDelegate<GlobalReject>;

  /**
   * `prisma.shareKeBanyak`: Exposes CRUD operations for the **ShareKeBanyak** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareKeBanyaks
    * const shareKeBanyaks = await prisma.shareKeBanyak.findMany()
    * ```
    */
  get shareKeBanyak(): Prisma.ShareKeBanyakDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userGroup`: Exposes CRUD operations for the **UserGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserGroups
    * const userGroups = await prisma.userGroup.findMany()
    * ```
    */
  get userGroup(): Prisma.UserGroupDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Content: 'Content',
    Gambar: 'Gambar',
    Postingan: 'Postingan',
    Session: 'Session',
    SessionBrowser: 'SessionBrowser',
    ShareKeBanyak: 'ShareKeBanyak',
    User: 'User',
    UserGroup: 'UserGroup'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ContentCountOutputType
   */


  export type ContentCountOutputType = {
    Gambar: number
    Postingan: number
  }

  export type ContentCountOutputTypeSelect = {
    Gambar?: boolean
    Postingan?: boolean
  }

  export type ContentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ContentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ContentCountOutputType
    : S extends undefined
    ? never
    : S extends ContentCountOutputTypeArgs
    ?'include' extends U
    ? ContentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContentCountOutputType ?ContentCountOutputType [P]
  : 
     never
  } 
    : ContentCountOutputType
  : ContentCountOutputType




  // Custom InputTypes

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ContentCountOutputType
     * 
    **/
    select?: ContentCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Postingan: number
    ShareKeBanyak: number
    UserGroup: number
  }

  export type UserCountOutputTypeSelect = {
    Postingan?: boolean
    ShareKeBanyak?: boolean
    UserGroup?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type UserGroupCountOutputType
   */


  export type UserGroupCountOutputType = {
    Postingan: number
  }

  export type UserGroupCountOutputTypeSelect = {
    Postingan?: boolean
  }

  export type UserGroupCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserGroupCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserGroupCountOutputType
    : S extends undefined
    ? never
    : S extends UserGroupCountOutputTypeArgs
    ?'include' extends U
    ? UserGroupCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserGroupCountOutputType ?UserGroupCountOutputType [P]
  : 
     never
  } 
    : UserGroupCountOutputType
  : UserGroupCountOutputType




  // Custom InputTypes

  /**
   * UserGroupCountOutputType without action
   */
  export type UserGroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserGroupCountOutputType
     * 
    **/
    select?: UserGroupCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Content
   */


  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentAvgAggregateOutputType = {
    id: number | null
    harga: number | null
  }

  export type ContentSumAggregateOutputType = {
    id: number | null
    harga: number | null
  }

  export type ContentMinAggregateOutputType = {
    id: number | null
    judul: string | null
    harga: number | null
    keterangan: string | null
  }

  export type ContentMaxAggregateOutputType = {
    id: number | null
    judul: string | null
    harga: number | null
    keterangan: string | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    judul: number
    harga: number
    keterangan: number
    _all: number
  }


  export type ContentAvgAggregateInputType = {
    id?: true
    harga?: true
  }

  export type ContentSumAggregateInputType = {
    id?: true
    harga?: true
  }

  export type ContentMinAggregateInputType = {
    id?: true
    judul?: true
    harga?: true
    keterangan?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    judul?: true
    harga?: true
    keterangan?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    judul?: true
    harga?: true
    keterangan?: true
    _all?: true
  }

  export type ContentAggregateArgs = {
    /**
     * Filter which Content to aggregate.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type ContentGroupByArgs = {
    where?: ContentWhereInput
    orderBy?: Enumerable<ContentOrderByWithAggregationInput>
    by: Array<ContentScalarFieldEnum>
    having?: ContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _avg?: ContentAvgAggregateInputType
    _sum?: ContentSumAggregateInputType
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }


  export type ContentGroupByOutputType = {
    id: number
    judul: string
    harga: number
    keterangan: string
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends ContentGroupByArgs> = Promise<
    Array<
      PickArray<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type ContentSelect = {
    id?: boolean
    judul?: boolean
    harga?: boolean
    keterangan?: boolean
    Gambar?: boolean | GambarFindManyArgs
    Postingan?: boolean | PostinganFindManyArgs
    _count?: boolean | ContentCountOutputTypeArgs
  }

  export type ContentInclude = {
    Gambar?: boolean | GambarFindManyArgs
    Postingan?: boolean | PostinganFindManyArgs
    _count?: boolean | ContentCountOutputTypeArgs
  }

  export type ContentGetPayload<
    S extends boolean | null | undefined | ContentArgs,
    U = keyof S
      > = S extends true
        ? Content
    : S extends undefined
    ? never
    : S extends ContentArgs | ContentFindManyArgs
    ?'include' extends U
    ? Content  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Gambar'
        ? Array < GambarGetPayload<S['include'][P]>>  :
        P extends 'Postingan'
        ? Array < PostinganGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ContentCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Content ?Content [P]
  : 
          P extends 'Gambar'
        ? Array < GambarGetPayload<S['select'][P]>>  :
        P extends 'Postingan'
        ? Array < PostinganGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ContentCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : Content
  : Content


  type ContentCountArgs = Merge<
    Omit<ContentFindManyArgs, 'select' | 'include'> & {
      select?: ContentCountAggregateInputType | true
    }
  >

  export interface ContentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Content that matches the filter.
     * @param {ContentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Content'> extends True ? CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>> : CheckSelect<T, Prisma__ContentClient<Content | null >, Prisma__ContentClient<ContentGetPayload<T> | null >>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Content'> extends True ? CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>> : CheckSelect<T, Prisma__ContentClient<Content | null >, Prisma__ContentClient<ContentGetPayload<T> | null >>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContentFindManyArgs>(
      args?: SelectSubset<T, ContentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Content>>, PrismaPromise<Array<ContentGetPayload<T>>>>

    /**
     * Create a Content.
     * @param {ContentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
    **/
    create<T extends ContentCreateArgs>(
      args: SelectSubset<T, ContentCreateArgs>
    ): CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>>

    /**
     * Create many Contents.
     *     @param {ContentCreateManyArgs} args - Arguments to create many Contents.
     *     @example
     *     // Create many Contents
     *     const content = await prisma.content.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContentCreateManyArgs>(
      args?: SelectSubset<T, ContentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Content.
     * @param {ContentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
    **/
    delete<T extends ContentDeleteArgs>(
      args: SelectSubset<T, ContentDeleteArgs>
    ): CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>>

    /**
     * Update one Content.
     * @param {ContentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContentUpdateArgs>(
      args: SelectSubset<T, ContentUpdateArgs>
    ): CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>>

    /**
     * Delete zero or more Contents.
     * @param {ContentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContentDeleteManyArgs>(
      args?: SelectSubset<T, ContentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContentUpdateManyArgs>(
      args: SelectSubset<T, ContentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Content.
     * @param {ContentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
    **/
    upsert<T extends ContentUpsertArgs>(
      args: SelectSubset<T, ContentUpsertArgs>
    ): CheckSelect<T, Prisma__ContentClient<Content>, Prisma__ContentClient<ContentGetPayload<T>>>

    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends ContentCountArgs>(
      args?: Subset<T, ContentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentGroupByArgs['orderBy'] }
        : { orderBy?: ContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Gambar<T extends GambarFindManyArgs = {}>(args?: Subset<T, GambarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Gambar>>, PrismaPromise<Array<GambarGetPayload<T>>>>;

    Postingan<T extends PostinganFindManyArgs = {}>(args?: Subset<T, PostinganFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Postingan>>, PrismaPromise<Array<PostinganGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Content findUnique
   */
  export type ContentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * Throw an Error if a Content can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content findFirst
   */
  export type ContentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * Throw an Error if a Content can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     * 
    **/
    distinct?: Enumerable<ContentScalarFieldEnum>
  }


  /**
   * Content findMany
   */
  export type ContentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * Filter, which Contents to fetch.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contents.
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContentScalarFieldEnum>
  }


  /**
   * Content create
   */
  export type ContentCreateArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * The data needed to create a Content.
     * 
    **/
    data: XOR<ContentCreateInput, ContentUncheckedCreateInput>
  }


  /**
   * Content createMany
   */
  export type ContentCreateManyArgs = {
    data: Enumerable<ContentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Content update
   */
  export type ContentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * The data needed to update a Content.
     * 
    **/
    data: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
    /**
     * Choose, which Content to update.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content updateMany
   */
  export type ContentUpdateManyArgs = {
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyInput>
    where?: ContentWhereInput
  }


  /**
   * Content upsert
   */
  export type ContentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * The filter to search for the Content to update in case it exists.
     * 
    **/
    where: ContentWhereUniqueInput
    /**
     * In case the Content found by the `where` argument doesn't exist, create a new Content with this data.
     * 
    **/
    create: XOR<ContentCreateInput, ContentUncheckedCreateInput>
    /**
     * In case the Content was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
  }


  /**
   * Content delete
   */
  export type ContentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
    /**
     * Filter which Content to delete.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content deleteMany
   */
  export type ContentDeleteManyArgs = {
    where?: ContentWhereInput
  }


  /**
   * Content without action
   */
  export type ContentArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentInclude | null
  }



  /**
   * Model Gambar
   */


  export type AggregateGambar = {
    _count: GambarCountAggregateOutputType | null
    _avg: GambarAvgAggregateOutputType | null
    _sum: GambarSumAggregateOutputType | null
    _min: GambarMinAggregateOutputType | null
    _max: GambarMaxAggregateOutputType | null
  }

  export type GambarAvgAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type GambarSumAggregateOutputType = {
    id: number | null
    contentId: number | null
  }

  export type GambarMinAggregateOutputType = {
    id: number | null
    destination: string | null
    filename: string | null
    path: string | null
    contentId: number | null
  }

  export type GambarMaxAggregateOutputType = {
    id: number | null
    destination: string | null
    filename: string | null
    path: string | null
    contentId: number | null
  }

  export type GambarCountAggregateOutputType = {
    id: number
    destination: number
    filename: number
    path: number
    contentId: number
    _all: number
  }


  export type GambarAvgAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type GambarSumAggregateInputType = {
    id?: true
    contentId?: true
  }

  export type GambarMinAggregateInputType = {
    id?: true
    destination?: true
    filename?: true
    path?: true
    contentId?: true
  }

  export type GambarMaxAggregateInputType = {
    id?: true
    destination?: true
    filename?: true
    path?: true
    contentId?: true
  }

  export type GambarCountAggregateInputType = {
    id?: true
    destination?: true
    filename?: true
    path?: true
    contentId?: true
    _all?: true
  }

  export type GambarAggregateArgs = {
    /**
     * Filter which Gambar to aggregate.
     * 
    **/
    where?: GambarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gambars to fetch.
     * 
    **/
    orderBy?: Enumerable<GambarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GambarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gambars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gambars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gambars
    **/
    _count?: true | GambarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GambarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GambarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GambarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GambarMaxAggregateInputType
  }

  export type GetGambarAggregateType<T extends GambarAggregateArgs> = {
        [P in keyof T & keyof AggregateGambar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGambar[P]>
      : GetScalarType<T[P], AggregateGambar[P]>
  }




  export type GambarGroupByArgs = {
    where?: GambarWhereInput
    orderBy?: Enumerable<GambarOrderByWithAggregationInput>
    by: Array<GambarScalarFieldEnum>
    having?: GambarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GambarCountAggregateInputType | true
    _avg?: GambarAvgAggregateInputType
    _sum?: GambarSumAggregateInputType
    _min?: GambarMinAggregateInputType
    _max?: GambarMaxAggregateInputType
  }


  export type GambarGroupByOutputType = {
    id: number
    destination: string
    filename: string
    path: string
    contentId: number
    _count: GambarCountAggregateOutputType | null
    _avg: GambarAvgAggregateOutputType | null
    _sum: GambarSumAggregateOutputType | null
    _min: GambarMinAggregateOutputType | null
    _max: GambarMaxAggregateOutputType | null
  }

  type GetGambarGroupByPayload<T extends GambarGroupByArgs> = Promise<
    Array<
      PickArray<GambarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GambarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GambarGroupByOutputType[P]>
            : GetScalarType<T[P], GambarGroupByOutputType[P]>
        }
      >
    >


  export type GambarSelect = {
    id?: boolean
    destination?: boolean
    filename?: boolean
    path?: boolean
    contentId?: boolean
    Content?: boolean | ContentArgs
  }

  export type GambarInclude = {
    Content?: boolean | ContentArgs
  }

  export type GambarGetPayload<
    S extends boolean | null | undefined | GambarArgs,
    U = keyof S
      > = S extends true
        ? Gambar
    : S extends undefined
    ? never
    : S extends GambarArgs | GambarFindManyArgs
    ?'include' extends U
    ? Gambar  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Content'
        ? ContentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Gambar ?Gambar [P]
  : 
          P extends 'Content'
        ? ContentGetPayload<S['select'][P]> : never
  } 
    : Gambar
  : Gambar


  type GambarCountArgs = Merge<
    Omit<GambarFindManyArgs, 'select' | 'include'> & {
      select?: GambarCountAggregateInputType | true
    }
  >

  export interface GambarDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Gambar that matches the filter.
     * @param {GambarFindUniqueArgs} args - Arguments to find a Gambar
     * @example
     * // Get one Gambar
     * const gambar = await prisma.gambar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GambarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GambarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Gambar'> extends True ? CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>> : CheckSelect<T, Prisma__GambarClient<Gambar | null >, Prisma__GambarClient<GambarGetPayload<T> | null >>

    /**
     * Find the first Gambar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarFindFirstArgs} args - Arguments to find a Gambar
     * @example
     * // Get one Gambar
     * const gambar = await prisma.gambar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GambarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GambarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Gambar'> extends True ? CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>> : CheckSelect<T, Prisma__GambarClient<Gambar | null >, Prisma__GambarClient<GambarGetPayload<T> | null >>

    /**
     * Find zero or more Gambars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gambars
     * const gambars = await prisma.gambar.findMany()
     * 
     * // Get first 10 Gambars
     * const gambars = await prisma.gambar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gambarWithIdOnly = await prisma.gambar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GambarFindManyArgs>(
      args?: SelectSubset<T, GambarFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Gambar>>, PrismaPromise<Array<GambarGetPayload<T>>>>

    /**
     * Create a Gambar.
     * @param {GambarCreateArgs} args - Arguments to create a Gambar.
     * @example
     * // Create one Gambar
     * const Gambar = await prisma.gambar.create({
     *   data: {
     *     // ... data to create a Gambar
     *   }
     * })
     * 
    **/
    create<T extends GambarCreateArgs>(
      args: SelectSubset<T, GambarCreateArgs>
    ): CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>>

    /**
     * Create many Gambars.
     *     @param {GambarCreateManyArgs} args - Arguments to create many Gambars.
     *     @example
     *     // Create many Gambars
     *     const gambar = await prisma.gambar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GambarCreateManyArgs>(
      args?: SelectSubset<T, GambarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Gambar.
     * @param {GambarDeleteArgs} args - Arguments to delete one Gambar.
     * @example
     * // Delete one Gambar
     * const Gambar = await prisma.gambar.delete({
     *   where: {
     *     // ... filter to delete one Gambar
     *   }
     * })
     * 
    **/
    delete<T extends GambarDeleteArgs>(
      args: SelectSubset<T, GambarDeleteArgs>
    ): CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>>

    /**
     * Update one Gambar.
     * @param {GambarUpdateArgs} args - Arguments to update one Gambar.
     * @example
     * // Update one Gambar
     * const gambar = await prisma.gambar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GambarUpdateArgs>(
      args: SelectSubset<T, GambarUpdateArgs>
    ): CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>>

    /**
     * Delete zero or more Gambars.
     * @param {GambarDeleteManyArgs} args - Arguments to filter Gambars to delete.
     * @example
     * // Delete a few Gambars
     * const { count } = await prisma.gambar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GambarDeleteManyArgs>(
      args?: SelectSubset<T, GambarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gambars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gambars
     * const gambar = await prisma.gambar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GambarUpdateManyArgs>(
      args: SelectSubset<T, GambarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Gambar.
     * @param {GambarUpsertArgs} args - Arguments to update or create a Gambar.
     * @example
     * // Update or create a Gambar
     * const gambar = await prisma.gambar.upsert({
     *   create: {
     *     // ... data to create a Gambar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gambar we want to update
     *   }
     * })
    **/
    upsert<T extends GambarUpsertArgs>(
      args: SelectSubset<T, GambarUpsertArgs>
    ): CheckSelect<T, Prisma__GambarClient<Gambar>, Prisma__GambarClient<GambarGetPayload<T>>>

    /**
     * Count the number of Gambars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarCountArgs} args - Arguments to filter Gambars to count.
     * @example
     * // Count the number of Gambars
     * const count = await prisma.gambar.count({
     *   where: {
     *     // ... the filter for the Gambars we want to count
     *   }
     * })
    **/
    count<T extends GambarCountArgs>(
      args?: Subset<T, GambarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GambarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gambar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GambarAggregateArgs>(args: Subset<T, GambarAggregateArgs>): PrismaPromise<GetGambarAggregateType<T>>

    /**
     * Group by Gambar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GambarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GambarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GambarGroupByArgs['orderBy'] }
        : { orderBy?: GambarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GambarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGambarGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gambar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GambarClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Content<T extends ContentArgs = {}>(args?: Subset<T, ContentArgs>): CheckSelect<T, Prisma__ContentClient<Content | null >, Prisma__ContentClient<ContentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Gambar findUnique
   */
  export type GambarFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * Throw an Error if a Gambar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Gambar to fetch.
     * 
    **/
    where: GambarWhereUniqueInput
  }


  /**
   * Gambar findFirst
   */
  export type GambarFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * Throw an Error if a Gambar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Gambar to fetch.
     * 
    **/
    where?: GambarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gambars to fetch.
     * 
    **/
    orderBy?: Enumerable<GambarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gambars.
     * 
    **/
    cursor?: GambarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gambars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gambars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gambars.
     * 
    **/
    distinct?: Enumerable<GambarScalarFieldEnum>
  }


  /**
   * Gambar findMany
   */
  export type GambarFindManyArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * Filter, which Gambars to fetch.
     * 
    **/
    where?: GambarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gambars to fetch.
     * 
    **/
    orderBy?: Enumerable<GambarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gambars.
     * 
    **/
    cursor?: GambarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gambars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gambars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GambarScalarFieldEnum>
  }


  /**
   * Gambar create
   */
  export type GambarCreateArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * The data needed to create a Gambar.
     * 
    **/
    data: XOR<GambarCreateInput, GambarUncheckedCreateInput>
  }


  /**
   * Gambar createMany
   */
  export type GambarCreateManyArgs = {
    data: Enumerable<GambarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Gambar update
   */
  export type GambarUpdateArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * The data needed to update a Gambar.
     * 
    **/
    data: XOR<GambarUpdateInput, GambarUncheckedUpdateInput>
    /**
     * Choose, which Gambar to update.
     * 
    **/
    where: GambarWhereUniqueInput
  }


  /**
   * Gambar updateMany
   */
  export type GambarUpdateManyArgs = {
    data: XOR<GambarUpdateManyMutationInput, GambarUncheckedUpdateManyInput>
    where?: GambarWhereInput
  }


  /**
   * Gambar upsert
   */
  export type GambarUpsertArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * The filter to search for the Gambar to update in case it exists.
     * 
    **/
    where: GambarWhereUniqueInput
    /**
     * In case the Gambar found by the `where` argument doesn't exist, create a new Gambar with this data.
     * 
    **/
    create: XOR<GambarCreateInput, GambarUncheckedCreateInput>
    /**
     * In case the Gambar was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GambarUpdateInput, GambarUncheckedUpdateInput>
  }


  /**
   * Gambar delete
   */
  export type GambarDeleteArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
    /**
     * Filter which Gambar to delete.
     * 
    **/
    where: GambarWhereUniqueInput
  }


  /**
   * Gambar deleteMany
   */
  export type GambarDeleteManyArgs = {
    where?: GambarWhereInput
  }


  /**
   * Gambar without action
   */
  export type GambarArgs = {
    /**
     * Select specific fields to fetch from the Gambar
     * 
    **/
    select?: GambarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GambarInclude | null
  }



  /**
   * Model Postingan
   */


  export type AggregatePostingan = {
    _count: PostinganCountAggregateOutputType | null
    _avg: PostinganAvgAggregateOutputType | null
    _sum: PostinganSumAggregateOutputType | null
    _min: PostinganMinAggregateOutputType | null
    _max: PostinganMaxAggregateOutputType | null
  }

  export type PostinganAvgAggregateOutputType = {
    id: number | null
    contentId: number | null
    userId: number | null
  }

  export type PostinganSumAggregateOutputType = {
    id: number | null
    contentId: number | null
    userId: number | null
  }

  export type PostinganMinAggregateOutputType = {
    id: number | null
    tanggal: Date | null
    contentId: number | null
    groupId: string | null
    userId: number | null
    postingId: string | null
  }

  export type PostinganMaxAggregateOutputType = {
    id: number | null
    tanggal: Date | null
    contentId: number | null
    groupId: string | null
    userId: number | null
    postingId: string | null
  }

  export type PostinganCountAggregateOutputType = {
    id: number
    tanggal: number
    contentId: number
    groupId: number
    userId: number
    postingId: number
    _all: number
  }


  export type PostinganAvgAggregateInputType = {
    id?: true
    contentId?: true
    userId?: true
  }

  export type PostinganSumAggregateInputType = {
    id?: true
    contentId?: true
    userId?: true
  }

  export type PostinganMinAggregateInputType = {
    id?: true
    tanggal?: true
    contentId?: true
    groupId?: true
    userId?: true
    postingId?: true
  }

  export type PostinganMaxAggregateInputType = {
    id?: true
    tanggal?: true
    contentId?: true
    groupId?: true
    userId?: true
    postingId?: true
  }

  export type PostinganCountAggregateInputType = {
    id?: true
    tanggal?: true
    contentId?: true
    groupId?: true
    userId?: true
    postingId?: true
    _all?: true
  }

  export type PostinganAggregateArgs = {
    /**
     * Filter which Postingan to aggregate.
     * 
    **/
    where?: PostinganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postingans to fetch.
     * 
    **/
    orderBy?: Enumerable<PostinganOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostinganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postingans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postingans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Postingans
    **/
    _count?: true | PostinganCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostinganAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostinganSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostinganMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostinganMaxAggregateInputType
  }

  export type GetPostinganAggregateType<T extends PostinganAggregateArgs> = {
        [P in keyof T & keyof AggregatePostingan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostingan[P]>
      : GetScalarType<T[P], AggregatePostingan[P]>
  }




  export type PostinganGroupByArgs = {
    where?: PostinganWhereInput
    orderBy?: Enumerable<PostinganOrderByWithAggregationInput>
    by: Array<PostinganScalarFieldEnum>
    having?: PostinganScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostinganCountAggregateInputType | true
    _avg?: PostinganAvgAggregateInputType
    _sum?: PostinganSumAggregateInputType
    _min?: PostinganMinAggregateInputType
    _max?: PostinganMaxAggregateInputType
  }


  export type PostinganGroupByOutputType = {
    id: number
    tanggal: Date
    contentId: number
    groupId: string
    userId: number
    postingId: string
    _count: PostinganCountAggregateOutputType | null
    _avg: PostinganAvgAggregateOutputType | null
    _sum: PostinganSumAggregateOutputType | null
    _min: PostinganMinAggregateOutputType | null
    _max: PostinganMaxAggregateOutputType | null
  }

  type GetPostinganGroupByPayload<T extends PostinganGroupByArgs> = Promise<
    Array<
      PickArray<PostinganGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostinganGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostinganGroupByOutputType[P]>
            : GetScalarType<T[P], PostinganGroupByOutputType[P]>
        }
      >
    >


  export type PostinganSelect = {
    id?: boolean
    tanggal?: boolean
    contentId?: boolean
    groupId?: boolean
    userId?: boolean
    postingId?: boolean
    Content?: boolean | ContentArgs
    UserGroup?: boolean | UserGroupArgs
    User?: boolean | UserArgs
  }

  export type PostinganInclude = {
    Content?: boolean | ContentArgs
    UserGroup?: boolean | UserGroupArgs
    User?: boolean | UserArgs
  }

  export type PostinganGetPayload<
    S extends boolean | null | undefined | PostinganArgs,
    U = keyof S
      > = S extends true
        ? Postingan
    : S extends undefined
    ? never
    : S extends PostinganArgs | PostinganFindManyArgs
    ?'include' extends U
    ? Postingan  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Content'
        ? ContentGetPayload<S['include'][P]> :
        P extends 'UserGroup'
        ? UserGroupGetPayload<S['include'][P]> :
        P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Postingan ?Postingan [P]
  : 
          P extends 'Content'
        ? ContentGetPayload<S['select'][P]> :
        P extends 'UserGroup'
        ? UserGroupGetPayload<S['select'][P]> :
        P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Postingan
  : Postingan


  type PostinganCountArgs = Merge<
    Omit<PostinganFindManyArgs, 'select' | 'include'> & {
      select?: PostinganCountAggregateInputType | true
    }
  >

  export interface PostinganDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Postingan that matches the filter.
     * @param {PostinganFindUniqueArgs} args - Arguments to find a Postingan
     * @example
     * // Get one Postingan
     * const postingan = await prisma.postingan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostinganFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostinganFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Postingan'> extends True ? CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>> : CheckSelect<T, Prisma__PostinganClient<Postingan | null >, Prisma__PostinganClient<PostinganGetPayload<T> | null >>

    /**
     * Find the first Postingan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganFindFirstArgs} args - Arguments to find a Postingan
     * @example
     * // Get one Postingan
     * const postingan = await prisma.postingan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostinganFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostinganFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Postingan'> extends True ? CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>> : CheckSelect<T, Prisma__PostinganClient<Postingan | null >, Prisma__PostinganClient<PostinganGetPayload<T> | null >>

    /**
     * Find zero or more Postingans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Postingans
     * const postingans = await prisma.postingan.findMany()
     * 
     * // Get first 10 Postingans
     * const postingans = await prisma.postingan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postinganWithIdOnly = await prisma.postingan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostinganFindManyArgs>(
      args?: SelectSubset<T, PostinganFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Postingan>>, PrismaPromise<Array<PostinganGetPayload<T>>>>

    /**
     * Create a Postingan.
     * @param {PostinganCreateArgs} args - Arguments to create a Postingan.
     * @example
     * // Create one Postingan
     * const Postingan = await prisma.postingan.create({
     *   data: {
     *     // ... data to create a Postingan
     *   }
     * })
     * 
    **/
    create<T extends PostinganCreateArgs>(
      args: SelectSubset<T, PostinganCreateArgs>
    ): CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>>

    /**
     * Create many Postingans.
     *     @param {PostinganCreateManyArgs} args - Arguments to create many Postingans.
     *     @example
     *     // Create many Postingans
     *     const postingan = await prisma.postingan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostinganCreateManyArgs>(
      args?: SelectSubset<T, PostinganCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Postingan.
     * @param {PostinganDeleteArgs} args - Arguments to delete one Postingan.
     * @example
     * // Delete one Postingan
     * const Postingan = await prisma.postingan.delete({
     *   where: {
     *     // ... filter to delete one Postingan
     *   }
     * })
     * 
    **/
    delete<T extends PostinganDeleteArgs>(
      args: SelectSubset<T, PostinganDeleteArgs>
    ): CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>>

    /**
     * Update one Postingan.
     * @param {PostinganUpdateArgs} args - Arguments to update one Postingan.
     * @example
     * // Update one Postingan
     * const postingan = await prisma.postingan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostinganUpdateArgs>(
      args: SelectSubset<T, PostinganUpdateArgs>
    ): CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>>

    /**
     * Delete zero or more Postingans.
     * @param {PostinganDeleteManyArgs} args - Arguments to filter Postingans to delete.
     * @example
     * // Delete a few Postingans
     * const { count } = await prisma.postingan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostinganDeleteManyArgs>(
      args?: SelectSubset<T, PostinganDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Postingans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Postingans
     * const postingan = await prisma.postingan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostinganUpdateManyArgs>(
      args: SelectSubset<T, PostinganUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Postingan.
     * @param {PostinganUpsertArgs} args - Arguments to update or create a Postingan.
     * @example
     * // Update or create a Postingan
     * const postingan = await prisma.postingan.upsert({
     *   create: {
     *     // ... data to create a Postingan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Postingan we want to update
     *   }
     * })
    **/
    upsert<T extends PostinganUpsertArgs>(
      args: SelectSubset<T, PostinganUpsertArgs>
    ): CheckSelect<T, Prisma__PostinganClient<Postingan>, Prisma__PostinganClient<PostinganGetPayload<T>>>

    /**
     * Count the number of Postingans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganCountArgs} args - Arguments to filter Postingans to count.
     * @example
     * // Count the number of Postingans
     * const count = await prisma.postingan.count({
     *   where: {
     *     // ... the filter for the Postingans we want to count
     *   }
     * })
    **/
    count<T extends PostinganCountArgs>(
      args?: Subset<T, PostinganCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostinganCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Postingan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostinganAggregateArgs>(args: Subset<T, PostinganAggregateArgs>): PrismaPromise<GetPostinganAggregateType<T>>

    /**
     * Group by Postingan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostinganGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostinganGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostinganGroupByArgs['orderBy'] }
        : { orderBy?: PostinganGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostinganGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostinganGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Postingan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostinganClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Content<T extends ContentArgs = {}>(args?: Subset<T, ContentArgs>): CheckSelect<T, Prisma__ContentClient<Content | null >, Prisma__ContentClient<ContentGetPayload<T> | null >>;

    UserGroup<T extends UserGroupArgs = {}>(args?: Subset<T, UserGroupArgs>): CheckSelect<T, Prisma__UserGroupClient<UserGroup | null >, Prisma__UserGroupClient<UserGroupGetPayload<T> | null >>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Postingan findUnique
   */
  export type PostinganFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * Throw an Error if a Postingan can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Postingan to fetch.
     * 
    **/
    where: PostinganWhereUniqueInput
  }


  /**
   * Postingan findFirst
   */
  export type PostinganFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * Throw an Error if a Postingan can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Postingan to fetch.
     * 
    **/
    where?: PostinganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postingans to fetch.
     * 
    **/
    orderBy?: Enumerable<PostinganOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Postingans.
     * 
    **/
    cursor?: PostinganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postingans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postingans.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Postingans.
     * 
    **/
    distinct?: Enumerable<PostinganScalarFieldEnum>
  }


  /**
   * Postingan findMany
   */
  export type PostinganFindManyArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * Filter, which Postingans to fetch.
     * 
    **/
    where?: PostinganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Postingans to fetch.
     * 
    **/
    orderBy?: Enumerable<PostinganOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Postingans.
     * 
    **/
    cursor?: PostinganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Postingans from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Postingans.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostinganScalarFieldEnum>
  }


  /**
   * Postingan create
   */
  export type PostinganCreateArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * The data needed to create a Postingan.
     * 
    **/
    data: XOR<PostinganCreateInput, PostinganUncheckedCreateInput>
  }


  /**
   * Postingan createMany
   */
  export type PostinganCreateManyArgs = {
    data: Enumerable<PostinganCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Postingan update
   */
  export type PostinganUpdateArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * The data needed to update a Postingan.
     * 
    **/
    data: XOR<PostinganUpdateInput, PostinganUncheckedUpdateInput>
    /**
     * Choose, which Postingan to update.
     * 
    **/
    where: PostinganWhereUniqueInput
  }


  /**
   * Postingan updateMany
   */
  export type PostinganUpdateManyArgs = {
    data: XOR<PostinganUpdateManyMutationInput, PostinganUncheckedUpdateManyInput>
    where?: PostinganWhereInput
  }


  /**
   * Postingan upsert
   */
  export type PostinganUpsertArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * The filter to search for the Postingan to update in case it exists.
     * 
    **/
    where: PostinganWhereUniqueInput
    /**
     * In case the Postingan found by the `where` argument doesn't exist, create a new Postingan with this data.
     * 
    **/
    create: XOR<PostinganCreateInput, PostinganUncheckedCreateInput>
    /**
     * In case the Postingan was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostinganUpdateInput, PostinganUncheckedUpdateInput>
  }


  /**
   * Postingan delete
   */
  export type PostinganDeleteArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
    /**
     * Filter which Postingan to delete.
     * 
    **/
    where: PostinganWhereUniqueInput
  }


  /**
   * Postingan deleteMany
   */
  export type PostinganDeleteManyArgs = {
    where?: PostinganWhereInput
  }


  /**
   * Postingan without action
   */
  export type PostinganArgs = {
    /**
     * Select specific fields to fetch from the Postingan
     * 
    **/
    select?: PostinganSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostinganInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    data: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    data: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    data: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    data?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    data?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    data?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    data: string
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Promise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    data?: boolean
    User?: boolean | UserArgs
  }

  export type SessionInclude = {
    User?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Session ?Session [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model SessionBrowser
   */


  export type AggregateSessionBrowser = {
    _count: SessionBrowserCountAggregateOutputType | null
    _avg: SessionBrowserAvgAggregateOutputType | null
    _sum: SessionBrowserSumAggregateOutputType | null
    _min: SessionBrowserMinAggregateOutputType | null
    _max: SessionBrowserMaxAggregateOutputType | null
  }

  export type SessionBrowserAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionBrowserSumAggregateOutputType = {
    id: number | null
  }

  export type SessionBrowserMinAggregateOutputType = {
    id: number | null
  }

  export type SessionBrowserMaxAggregateOutputType = {
    id: number | null
  }

  export type SessionBrowserCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type SessionBrowserAvgAggregateInputType = {
    id?: true
  }

  export type SessionBrowserSumAggregateInputType = {
    id?: true
  }

  export type SessionBrowserMinAggregateInputType = {
    id?: true
  }

  export type SessionBrowserMaxAggregateInputType = {
    id?: true
  }

  export type SessionBrowserCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type SessionBrowserAggregateArgs = {
    /**
     * Filter which SessionBrowser to aggregate.
     * 
    **/
    where?: SessionBrowserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionBrowsers to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionBrowserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionBrowserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionBrowsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionBrowsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionBrowsers
    **/
    _count?: true | SessionBrowserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionBrowserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionBrowserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionBrowserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionBrowserMaxAggregateInputType
  }

  export type GetSessionBrowserAggregateType<T extends SessionBrowserAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionBrowser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionBrowser[P]>
      : GetScalarType<T[P], AggregateSessionBrowser[P]>
  }




  export type SessionBrowserGroupByArgs = {
    where?: SessionBrowserWhereInput
    orderBy?: Enumerable<SessionBrowserOrderByWithAggregationInput>
    by: Array<SessionBrowserScalarFieldEnum>
    having?: SessionBrowserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionBrowserCountAggregateInputType | true
    _avg?: SessionBrowserAvgAggregateInputType
    _sum?: SessionBrowserSumAggregateInputType
    _min?: SessionBrowserMinAggregateInputType
    _max?: SessionBrowserMaxAggregateInputType
  }


  export type SessionBrowserGroupByOutputType = {
    id: number
    _count: SessionBrowserCountAggregateOutputType | null
    _avg: SessionBrowserAvgAggregateOutputType | null
    _sum: SessionBrowserSumAggregateOutputType | null
    _min: SessionBrowserMinAggregateOutputType | null
    _max: SessionBrowserMaxAggregateOutputType | null
  }

  type GetSessionBrowserGroupByPayload<T extends SessionBrowserGroupByArgs> = Promise<
    Array<
      PickArray<SessionBrowserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionBrowserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionBrowserGroupByOutputType[P]>
            : GetScalarType<T[P], SessionBrowserGroupByOutputType[P]>
        }
      >
    >


  export type SessionBrowserSelect = {
    id?: boolean
    User?: boolean | UserArgs
  }

  export type SessionBrowserInclude = {
    User?: boolean | UserArgs
  }

  export type SessionBrowserGetPayload<
    S extends boolean | null | undefined | SessionBrowserArgs,
    U = keyof S
      > = S extends true
        ? SessionBrowser
    : S extends undefined
    ? never
    : S extends SessionBrowserArgs | SessionBrowserFindManyArgs
    ?'include' extends U
    ? SessionBrowser  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SessionBrowser ?SessionBrowser [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : SessionBrowser
  : SessionBrowser


  type SessionBrowserCountArgs = Merge<
    Omit<SessionBrowserFindManyArgs, 'select' | 'include'> & {
      select?: SessionBrowserCountAggregateInputType | true
    }
  >

  export interface SessionBrowserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SessionBrowser that matches the filter.
     * @param {SessionBrowserFindUniqueArgs} args - Arguments to find a SessionBrowser
     * @example
     * // Get one SessionBrowser
     * const sessionBrowser = await prisma.sessionBrowser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionBrowserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionBrowserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SessionBrowser'> extends True ? CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>> : CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser | null >, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T> | null >>

    /**
     * Find the first SessionBrowser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserFindFirstArgs} args - Arguments to find a SessionBrowser
     * @example
     * // Get one SessionBrowser
     * const sessionBrowser = await prisma.sessionBrowser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionBrowserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionBrowserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SessionBrowser'> extends True ? CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>> : CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser | null >, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T> | null >>

    /**
     * Find zero or more SessionBrowsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionBrowsers
     * const sessionBrowsers = await prisma.sessionBrowser.findMany()
     * 
     * // Get first 10 SessionBrowsers
     * const sessionBrowsers = await prisma.sessionBrowser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionBrowserWithIdOnly = await prisma.sessionBrowser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionBrowserFindManyArgs>(
      args?: SelectSubset<T, SessionBrowserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SessionBrowser>>, PrismaPromise<Array<SessionBrowserGetPayload<T>>>>

    /**
     * Create a SessionBrowser.
     * @param {SessionBrowserCreateArgs} args - Arguments to create a SessionBrowser.
     * @example
     * // Create one SessionBrowser
     * const SessionBrowser = await prisma.sessionBrowser.create({
     *   data: {
     *     // ... data to create a SessionBrowser
     *   }
     * })
     * 
    **/
    create<T extends SessionBrowserCreateArgs>(
      args: SelectSubset<T, SessionBrowserCreateArgs>
    ): CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>>

    /**
     * Create many SessionBrowsers.
     *     @param {SessionBrowserCreateManyArgs} args - Arguments to create many SessionBrowsers.
     *     @example
     *     // Create many SessionBrowsers
     *     const sessionBrowser = await prisma.sessionBrowser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionBrowserCreateManyArgs>(
      args?: SelectSubset<T, SessionBrowserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SessionBrowser.
     * @param {SessionBrowserDeleteArgs} args - Arguments to delete one SessionBrowser.
     * @example
     * // Delete one SessionBrowser
     * const SessionBrowser = await prisma.sessionBrowser.delete({
     *   where: {
     *     // ... filter to delete one SessionBrowser
     *   }
     * })
     * 
    **/
    delete<T extends SessionBrowserDeleteArgs>(
      args: SelectSubset<T, SessionBrowserDeleteArgs>
    ): CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>>

    /**
     * Update one SessionBrowser.
     * @param {SessionBrowserUpdateArgs} args - Arguments to update one SessionBrowser.
     * @example
     * // Update one SessionBrowser
     * const sessionBrowser = await prisma.sessionBrowser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionBrowserUpdateArgs>(
      args: SelectSubset<T, SessionBrowserUpdateArgs>
    ): CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>>

    /**
     * Delete zero or more SessionBrowsers.
     * @param {SessionBrowserDeleteManyArgs} args - Arguments to filter SessionBrowsers to delete.
     * @example
     * // Delete a few SessionBrowsers
     * const { count } = await prisma.sessionBrowser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionBrowserDeleteManyArgs>(
      args?: SelectSubset<T, SessionBrowserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionBrowsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionBrowsers
     * const sessionBrowser = await prisma.sessionBrowser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionBrowserUpdateManyArgs>(
      args: SelectSubset<T, SessionBrowserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionBrowser.
     * @param {SessionBrowserUpsertArgs} args - Arguments to update or create a SessionBrowser.
     * @example
     * // Update or create a SessionBrowser
     * const sessionBrowser = await prisma.sessionBrowser.upsert({
     *   create: {
     *     // ... data to create a SessionBrowser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionBrowser we want to update
     *   }
     * })
    **/
    upsert<T extends SessionBrowserUpsertArgs>(
      args: SelectSubset<T, SessionBrowserUpsertArgs>
    ): CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser>, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T>>>

    /**
     * Count the number of SessionBrowsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserCountArgs} args - Arguments to filter SessionBrowsers to count.
     * @example
     * // Count the number of SessionBrowsers
     * const count = await prisma.sessionBrowser.count({
     *   where: {
     *     // ... the filter for the SessionBrowsers we want to count
     *   }
     * })
    **/
    count<T extends SessionBrowserCountArgs>(
      args?: Subset<T, SessionBrowserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionBrowserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionBrowser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionBrowserAggregateArgs>(args: Subset<T, SessionBrowserAggregateArgs>): PrismaPromise<GetSessionBrowserAggregateType<T>>

    /**
     * Group by SessionBrowser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionBrowserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionBrowserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionBrowserGroupByArgs['orderBy'] }
        : { orderBy?: SessionBrowserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionBrowserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionBrowserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionBrowser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionBrowserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SessionBrowser findUnique
   */
  export type SessionBrowserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * Throw an Error if a SessionBrowser can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionBrowser to fetch.
     * 
    **/
    where: SessionBrowserWhereUniqueInput
  }


  /**
   * SessionBrowser findFirst
   */
  export type SessionBrowserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * Throw an Error if a SessionBrowser can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SessionBrowser to fetch.
     * 
    **/
    where?: SessionBrowserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionBrowsers to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionBrowserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionBrowsers.
     * 
    **/
    cursor?: SessionBrowserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionBrowsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionBrowsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionBrowsers.
     * 
    **/
    distinct?: Enumerable<SessionBrowserScalarFieldEnum>
  }


  /**
   * SessionBrowser findMany
   */
  export type SessionBrowserFindManyArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * Filter, which SessionBrowsers to fetch.
     * 
    **/
    where?: SessionBrowserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionBrowsers to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionBrowserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionBrowsers.
     * 
    **/
    cursor?: SessionBrowserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionBrowsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionBrowsers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionBrowserScalarFieldEnum>
  }


  /**
   * SessionBrowser create
   */
  export type SessionBrowserCreateArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * The data needed to create a SessionBrowser.
     * 
    **/
    data: XOR<SessionBrowserCreateInput, SessionBrowserUncheckedCreateInput>
  }


  /**
   * SessionBrowser createMany
   */
  export type SessionBrowserCreateManyArgs = {
    data: Enumerable<SessionBrowserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SessionBrowser update
   */
  export type SessionBrowserUpdateArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * The data needed to update a SessionBrowser.
     * 
    **/
    data: XOR<SessionBrowserUpdateInput, SessionBrowserUncheckedUpdateInput>
    /**
     * Choose, which SessionBrowser to update.
     * 
    **/
    where: SessionBrowserWhereUniqueInput
  }


  /**
   * SessionBrowser updateMany
   */
  export type SessionBrowserUpdateManyArgs = {
    data: XOR<SessionBrowserUpdateManyMutationInput, SessionBrowserUncheckedUpdateManyInput>
    where?: SessionBrowserWhereInput
  }


  /**
   * SessionBrowser upsert
   */
  export type SessionBrowserUpsertArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * The filter to search for the SessionBrowser to update in case it exists.
     * 
    **/
    where: SessionBrowserWhereUniqueInput
    /**
     * In case the SessionBrowser found by the `where` argument doesn't exist, create a new SessionBrowser with this data.
     * 
    **/
    create: XOR<SessionBrowserCreateInput, SessionBrowserUncheckedCreateInput>
    /**
     * In case the SessionBrowser was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionBrowserUpdateInput, SessionBrowserUncheckedUpdateInput>
  }


  /**
   * SessionBrowser delete
   */
  export type SessionBrowserDeleteArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
    /**
     * Filter which SessionBrowser to delete.
     * 
    **/
    where: SessionBrowserWhereUniqueInput
  }


  /**
   * SessionBrowser deleteMany
   */
  export type SessionBrowserDeleteManyArgs = {
    where?: SessionBrowserWhereInput
  }


  /**
   * SessionBrowser without action
   */
  export type SessionBrowserArgs = {
    /**
     * Select specific fields to fetch from the SessionBrowser
     * 
    **/
    select?: SessionBrowserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionBrowserInclude | null
  }



  /**
   * Model ShareKeBanyak
   */


  export type AggregateShareKeBanyak = {
    _count: ShareKeBanyakCountAggregateOutputType | null
    _avg: ShareKeBanyakAvgAggregateOutputType | null
    _sum: ShareKeBanyakSumAggregateOutputType | null
    _min: ShareKeBanyakMinAggregateOutputType | null
    _max: ShareKeBanyakMaxAggregateOutputType | null
  }

  export type ShareKeBanyakAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShareKeBanyakSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShareKeBanyakMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    tanggal: Date | null
    userId: number | null
  }

  export type ShareKeBanyakMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    tanggal: Date | null
    userId: number | null
  }

  export type ShareKeBanyakCountAggregateOutputType = {
    id: number
    groupName: number
    tanggal: number
    userId: number
    _all: number
  }


  export type ShareKeBanyakAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShareKeBanyakSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShareKeBanyakMinAggregateInputType = {
    id?: true
    groupName?: true
    tanggal?: true
    userId?: true
  }

  export type ShareKeBanyakMaxAggregateInputType = {
    id?: true
    groupName?: true
    tanggal?: true
    userId?: true
  }

  export type ShareKeBanyakCountAggregateInputType = {
    id?: true
    groupName?: true
    tanggal?: true
    userId?: true
    _all?: true
  }

  export type ShareKeBanyakAggregateArgs = {
    /**
     * Filter which ShareKeBanyak to aggregate.
     * 
    **/
    where?: ShareKeBanyakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareKeBanyaks to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareKeBanyakOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShareKeBanyakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareKeBanyaks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareKeBanyaks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareKeBanyaks
    **/
    _count?: true | ShareKeBanyakCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareKeBanyakAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareKeBanyakSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareKeBanyakMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareKeBanyakMaxAggregateInputType
  }

  export type GetShareKeBanyakAggregateType<T extends ShareKeBanyakAggregateArgs> = {
        [P in keyof T & keyof AggregateShareKeBanyak]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareKeBanyak[P]>
      : GetScalarType<T[P], AggregateShareKeBanyak[P]>
  }




  export type ShareKeBanyakGroupByArgs = {
    where?: ShareKeBanyakWhereInput
    orderBy?: Enumerable<ShareKeBanyakOrderByWithAggregationInput>
    by: Array<ShareKeBanyakScalarFieldEnum>
    having?: ShareKeBanyakScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareKeBanyakCountAggregateInputType | true
    _avg?: ShareKeBanyakAvgAggregateInputType
    _sum?: ShareKeBanyakSumAggregateInputType
    _min?: ShareKeBanyakMinAggregateInputType
    _max?: ShareKeBanyakMaxAggregateInputType
  }


  export type ShareKeBanyakGroupByOutputType = {
    id: number
    groupName: string
    tanggal: Date
    userId: number
    _count: ShareKeBanyakCountAggregateOutputType | null
    _avg: ShareKeBanyakAvgAggregateOutputType | null
    _sum: ShareKeBanyakSumAggregateOutputType | null
    _min: ShareKeBanyakMinAggregateOutputType | null
    _max: ShareKeBanyakMaxAggregateOutputType | null
  }

  type GetShareKeBanyakGroupByPayload<T extends ShareKeBanyakGroupByArgs> = Promise<
    Array<
      PickArray<ShareKeBanyakGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareKeBanyakGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareKeBanyakGroupByOutputType[P]>
            : GetScalarType<T[P], ShareKeBanyakGroupByOutputType[P]>
        }
      >
    >


  export type ShareKeBanyakSelect = {
    id?: boolean
    groupName?: boolean
    tanggal?: boolean
    userId?: boolean
    User?: boolean | UserArgs
  }

  export type ShareKeBanyakInclude = {
    User?: boolean | UserArgs
  }

  export type ShareKeBanyakGetPayload<
    S extends boolean | null | undefined | ShareKeBanyakArgs,
    U = keyof S
      > = S extends true
        ? ShareKeBanyak
    : S extends undefined
    ? never
    : S extends ShareKeBanyakArgs | ShareKeBanyakFindManyArgs
    ?'include' extends U
    ? ShareKeBanyak  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ShareKeBanyak ?ShareKeBanyak [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : ShareKeBanyak
  : ShareKeBanyak


  type ShareKeBanyakCountArgs = Merge<
    Omit<ShareKeBanyakFindManyArgs, 'select' | 'include'> & {
      select?: ShareKeBanyakCountAggregateInputType | true
    }
  >

  export interface ShareKeBanyakDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShareKeBanyak that matches the filter.
     * @param {ShareKeBanyakFindUniqueArgs} args - Arguments to find a ShareKeBanyak
     * @example
     * // Get one ShareKeBanyak
     * const shareKeBanyak = await prisma.shareKeBanyak.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShareKeBanyakFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShareKeBanyakFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShareKeBanyak'> extends True ? CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>> : CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak | null >, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T> | null >>

    /**
     * Find the first ShareKeBanyak that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakFindFirstArgs} args - Arguments to find a ShareKeBanyak
     * @example
     * // Get one ShareKeBanyak
     * const shareKeBanyak = await prisma.shareKeBanyak.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShareKeBanyakFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShareKeBanyakFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShareKeBanyak'> extends True ? CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>> : CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak | null >, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T> | null >>

    /**
     * Find zero or more ShareKeBanyaks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareKeBanyaks
     * const shareKeBanyaks = await prisma.shareKeBanyak.findMany()
     * 
     * // Get first 10 ShareKeBanyaks
     * const shareKeBanyaks = await prisma.shareKeBanyak.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareKeBanyakWithIdOnly = await prisma.shareKeBanyak.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShareKeBanyakFindManyArgs>(
      args?: SelectSubset<T, ShareKeBanyakFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShareKeBanyak>>, PrismaPromise<Array<ShareKeBanyakGetPayload<T>>>>

    /**
     * Create a ShareKeBanyak.
     * @param {ShareKeBanyakCreateArgs} args - Arguments to create a ShareKeBanyak.
     * @example
     * // Create one ShareKeBanyak
     * const ShareKeBanyak = await prisma.shareKeBanyak.create({
     *   data: {
     *     // ... data to create a ShareKeBanyak
     *   }
     * })
     * 
    **/
    create<T extends ShareKeBanyakCreateArgs>(
      args: SelectSubset<T, ShareKeBanyakCreateArgs>
    ): CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>>

    /**
     * Create many ShareKeBanyaks.
     *     @param {ShareKeBanyakCreateManyArgs} args - Arguments to create many ShareKeBanyaks.
     *     @example
     *     // Create many ShareKeBanyaks
     *     const shareKeBanyak = await prisma.shareKeBanyak.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShareKeBanyakCreateManyArgs>(
      args?: SelectSubset<T, ShareKeBanyakCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShareKeBanyak.
     * @param {ShareKeBanyakDeleteArgs} args - Arguments to delete one ShareKeBanyak.
     * @example
     * // Delete one ShareKeBanyak
     * const ShareKeBanyak = await prisma.shareKeBanyak.delete({
     *   where: {
     *     // ... filter to delete one ShareKeBanyak
     *   }
     * })
     * 
    **/
    delete<T extends ShareKeBanyakDeleteArgs>(
      args: SelectSubset<T, ShareKeBanyakDeleteArgs>
    ): CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>>

    /**
     * Update one ShareKeBanyak.
     * @param {ShareKeBanyakUpdateArgs} args - Arguments to update one ShareKeBanyak.
     * @example
     * // Update one ShareKeBanyak
     * const shareKeBanyak = await prisma.shareKeBanyak.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShareKeBanyakUpdateArgs>(
      args: SelectSubset<T, ShareKeBanyakUpdateArgs>
    ): CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>>

    /**
     * Delete zero or more ShareKeBanyaks.
     * @param {ShareKeBanyakDeleteManyArgs} args - Arguments to filter ShareKeBanyaks to delete.
     * @example
     * // Delete a few ShareKeBanyaks
     * const { count } = await prisma.shareKeBanyak.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShareKeBanyakDeleteManyArgs>(
      args?: SelectSubset<T, ShareKeBanyakDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareKeBanyaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareKeBanyaks
     * const shareKeBanyak = await prisma.shareKeBanyak.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShareKeBanyakUpdateManyArgs>(
      args: SelectSubset<T, ShareKeBanyakUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareKeBanyak.
     * @param {ShareKeBanyakUpsertArgs} args - Arguments to update or create a ShareKeBanyak.
     * @example
     * // Update or create a ShareKeBanyak
     * const shareKeBanyak = await prisma.shareKeBanyak.upsert({
     *   create: {
     *     // ... data to create a ShareKeBanyak
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareKeBanyak we want to update
     *   }
     * })
    **/
    upsert<T extends ShareKeBanyakUpsertArgs>(
      args: SelectSubset<T, ShareKeBanyakUpsertArgs>
    ): CheckSelect<T, Prisma__ShareKeBanyakClient<ShareKeBanyak>, Prisma__ShareKeBanyakClient<ShareKeBanyakGetPayload<T>>>

    /**
     * Count the number of ShareKeBanyaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakCountArgs} args - Arguments to filter ShareKeBanyaks to count.
     * @example
     * // Count the number of ShareKeBanyaks
     * const count = await prisma.shareKeBanyak.count({
     *   where: {
     *     // ... the filter for the ShareKeBanyaks we want to count
     *   }
     * })
    **/
    count<T extends ShareKeBanyakCountArgs>(
      args?: Subset<T, ShareKeBanyakCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareKeBanyakCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareKeBanyak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareKeBanyakAggregateArgs>(args: Subset<T, ShareKeBanyakAggregateArgs>): PrismaPromise<GetShareKeBanyakAggregateType<T>>

    /**
     * Group by ShareKeBanyak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareKeBanyakGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareKeBanyakGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareKeBanyakGroupByArgs['orderBy'] }
        : { orderBy?: ShareKeBanyakGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareKeBanyakGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareKeBanyakGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareKeBanyak.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShareKeBanyakClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShareKeBanyak findUnique
   */
  export type ShareKeBanyakFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * Throw an Error if a ShareKeBanyak can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShareKeBanyak to fetch.
     * 
    **/
    where: ShareKeBanyakWhereUniqueInput
  }


  /**
   * ShareKeBanyak findFirst
   */
  export type ShareKeBanyakFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * Throw an Error if a ShareKeBanyak can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShareKeBanyak to fetch.
     * 
    **/
    where?: ShareKeBanyakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareKeBanyaks to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareKeBanyakOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareKeBanyaks.
     * 
    **/
    cursor?: ShareKeBanyakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareKeBanyaks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareKeBanyaks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareKeBanyaks.
     * 
    **/
    distinct?: Enumerable<ShareKeBanyakScalarFieldEnum>
  }


  /**
   * ShareKeBanyak findMany
   */
  export type ShareKeBanyakFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * Filter, which ShareKeBanyaks to fetch.
     * 
    **/
    where?: ShareKeBanyakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareKeBanyaks to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareKeBanyakOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareKeBanyaks.
     * 
    **/
    cursor?: ShareKeBanyakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareKeBanyaks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareKeBanyaks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShareKeBanyakScalarFieldEnum>
  }


  /**
   * ShareKeBanyak create
   */
  export type ShareKeBanyakCreateArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * The data needed to create a ShareKeBanyak.
     * 
    **/
    data: XOR<ShareKeBanyakCreateInput, ShareKeBanyakUncheckedCreateInput>
  }


  /**
   * ShareKeBanyak createMany
   */
  export type ShareKeBanyakCreateManyArgs = {
    data: Enumerable<ShareKeBanyakCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShareKeBanyak update
   */
  export type ShareKeBanyakUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * The data needed to update a ShareKeBanyak.
     * 
    **/
    data: XOR<ShareKeBanyakUpdateInput, ShareKeBanyakUncheckedUpdateInput>
    /**
     * Choose, which ShareKeBanyak to update.
     * 
    **/
    where: ShareKeBanyakWhereUniqueInput
  }


  /**
   * ShareKeBanyak updateMany
   */
  export type ShareKeBanyakUpdateManyArgs = {
    data: XOR<ShareKeBanyakUpdateManyMutationInput, ShareKeBanyakUncheckedUpdateManyInput>
    where?: ShareKeBanyakWhereInput
  }


  /**
   * ShareKeBanyak upsert
   */
  export type ShareKeBanyakUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * The filter to search for the ShareKeBanyak to update in case it exists.
     * 
    **/
    where: ShareKeBanyakWhereUniqueInput
    /**
     * In case the ShareKeBanyak found by the `where` argument doesn't exist, create a new ShareKeBanyak with this data.
     * 
    **/
    create: XOR<ShareKeBanyakCreateInput, ShareKeBanyakUncheckedCreateInput>
    /**
     * In case the ShareKeBanyak was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShareKeBanyakUpdateInput, ShareKeBanyakUncheckedUpdateInput>
  }


  /**
   * ShareKeBanyak delete
   */
  export type ShareKeBanyakDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
    /**
     * Filter which ShareKeBanyak to delete.
     * 
    **/
    where: ShareKeBanyakWhereUniqueInput
  }


  /**
   * ShareKeBanyak deleteMany
   */
  export type ShareKeBanyakDeleteManyArgs = {
    where?: ShareKeBanyakWhereInput
  }


  /**
   * ShareKeBanyak without action
   */
  export type ShareKeBanyakArgs = {
    /**
     * Select specific fields to fetch from the ShareKeBanyak
     * 
    **/
    select?: ShareKeBanyakSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareKeBanyakInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    active: boolean | null
    desc: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    active: boolean | null
    desc: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    active: number
    desc: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    active?: true
    desc?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    active?: true
    desc?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    active?: true
    desc?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    active: boolean
    desc: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    active?: boolean
    desc?: boolean
    Postingan?: boolean | PostinganFindManyArgs
    Session?: boolean | SessionArgs
    SessionBrowser?: boolean | SessionBrowserArgs
    ShareKeBanyak?: boolean | ShareKeBanyakFindManyArgs
    UserGroup?: boolean | UserGroupFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Postingan?: boolean | PostinganFindManyArgs
    Session?: boolean | SessionArgs
    SessionBrowser?: boolean | SessionBrowserArgs
    ShareKeBanyak?: boolean | ShareKeBanyakFindManyArgs
    UserGroup?: boolean | UserGroupFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Postingan'
        ? Array < PostinganGetPayload<S['include'][P]>>  :
        P extends 'Session'
        ? SessionGetPayload<S['include'][P]> | null :
        P extends 'SessionBrowser'
        ? SessionBrowserGetPayload<S['include'][P]> | null :
        P extends 'ShareKeBanyak'
        ? Array < ShareKeBanyakGetPayload<S['include'][P]>>  :
        P extends 'UserGroup'
        ? Array < UserGroupGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'Postingan'
        ? Array < PostinganGetPayload<S['select'][P]>>  :
        P extends 'Session'
        ? SessionGetPayload<S['select'][P]> | null :
        P extends 'SessionBrowser'
        ? SessionBrowserGetPayload<S['select'][P]> | null :
        P extends 'ShareKeBanyak'
        ? Array < ShareKeBanyakGetPayload<S['select'][P]>>  :
        P extends 'UserGroup'
        ? Array < UserGroupGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Postingan<T extends PostinganFindManyArgs = {}>(args?: Subset<T, PostinganFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Postingan>>, PrismaPromise<Array<PostinganGetPayload<T>>>>;

    Session<T extends SessionArgs = {}>(args?: Subset<T, SessionArgs>): CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>;

    SessionBrowser<T extends SessionBrowserArgs = {}>(args?: Subset<T, SessionBrowserArgs>): CheckSelect<T, Prisma__SessionBrowserClient<SessionBrowser | null >, Prisma__SessionBrowserClient<SessionBrowserGetPayload<T> | null >>;

    ShareKeBanyak<T extends ShareKeBanyakFindManyArgs = {}>(args?: Subset<T, ShareKeBanyakFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ShareKeBanyak>>, PrismaPromise<Array<ShareKeBanyakGetPayload<T>>>>;

    UserGroup<T extends UserGroupFindManyArgs = {}>(args?: Subset<T, UserGroupFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserGroup>>, PrismaPromise<Array<UserGroupGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserGroup
   */


  export type AggregateUserGroup = {
    _count: UserGroupCountAggregateOutputType | null
    _avg: UserGroupAvgAggregateOutputType | null
    _sum: UserGroupSumAggregateOutputType | null
    _min: UserGroupMinAggregateOutputType | null
    _max: UserGroupMaxAggregateOutputType | null
  }

  export type UserGroupAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserGroupSumAggregateOutputType = {
    userId: number | null
  }

  export type UserGroupMinAggregateOutputType = {
    groupId: string | null
    name: string | null
    url: string | null
    userId: number | null
    jualBeli: boolean | null
  }

  export type UserGroupMaxAggregateOutputType = {
    groupId: string | null
    name: string | null
    url: string | null
    userId: number | null
    jualBeli: boolean | null
  }

  export type UserGroupCountAggregateOutputType = {
    groupId: number
    name: number
    url: number
    userId: number
    jualBeli: number
    _all: number
  }


  export type UserGroupAvgAggregateInputType = {
    userId?: true
  }

  export type UserGroupSumAggregateInputType = {
    userId?: true
  }

  export type UserGroupMinAggregateInputType = {
    groupId?: true
    name?: true
    url?: true
    userId?: true
    jualBeli?: true
  }

  export type UserGroupMaxAggregateInputType = {
    groupId?: true
    name?: true
    url?: true
    userId?: true
    jualBeli?: true
  }

  export type UserGroupCountAggregateInputType = {
    groupId?: true
    name?: true
    url?: true
    userId?: true
    jualBeli?: true
    _all?: true
  }

  export type UserGroupAggregateArgs = {
    /**
     * Filter which UserGroup to aggregate.
     * 
    **/
    where?: UserGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<UserGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserGroups
    **/
    _count?: true | UserGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserGroupMaxAggregateInputType
  }

  export type GetUserGroupAggregateType<T extends UserGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateUserGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserGroup[P]>
      : GetScalarType<T[P], AggregateUserGroup[P]>
  }




  export type UserGroupGroupByArgs = {
    where?: UserGroupWhereInput
    orderBy?: Enumerable<UserGroupOrderByWithAggregationInput>
    by: Array<UserGroupScalarFieldEnum>
    having?: UserGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserGroupCountAggregateInputType | true
    _avg?: UserGroupAvgAggregateInputType
    _sum?: UserGroupSumAggregateInputType
    _min?: UserGroupMinAggregateInputType
    _max?: UserGroupMaxAggregateInputType
  }


  export type UserGroupGroupByOutputType = {
    groupId: string
    name: string
    url: string
    userId: number
    jualBeli: boolean | null
    _count: UserGroupCountAggregateOutputType | null
    _avg: UserGroupAvgAggregateOutputType | null
    _sum: UserGroupSumAggregateOutputType | null
    _min: UserGroupMinAggregateOutputType | null
    _max: UserGroupMaxAggregateOutputType | null
  }

  type GetUserGroupGroupByPayload<T extends UserGroupGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupGroupByOutputType[P]>
        }
      >
    >


  export type UserGroupSelect = {
    groupId?: boolean
    name?: boolean
    url?: boolean
    userId?: boolean
    jualBeli?: boolean
    User?: boolean | UserArgs
    Postingan?: boolean | PostinganFindManyArgs
    _count?: boolean | UserGroupCountOutputTypeArgs
  }

  export type UserGroupInclude = {
    User?: boolean | UserArgs
    Postingan?: boolean | PostinganFindManyArgs
    _count?: boolean | UserGroupCountOutputTypeArgs
  }

  export type UserGroupGetPayload<
    S extends boolean | null | undefined | UserGroupArgs,
    U = keyof S
      > = S extends true
        ? UserGroup
    : S extends undefined
    ? never
    : S extends UserGroupArgs | UserGroupFindManyArgs
    ?'include' extends U
    ? UserGroup  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Postingan'
        ? Array < PostinganGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserGroupCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserGroup ?UserGroup [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Postingan'
        ? Array < PostinganGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserGroupCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : UserGroup
  : UserGroup


  type UserGroupCountArgs = Merge<
    Omit<UserGroupFindManyArgs, 'select' | 'include'> & {
      select?: UserGroupCountAggregateInputType | true
    }
  >

  export interface UserGroupDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserGroup that matches the filter.
     * @param {UserGroupFindUniqueArgs} args - Arguments to find a UserGroup
     * @example
     * // Get one UserGroup
     * const userGroup = await prisma.userGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserGroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserGroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserGroup'> extends True ? CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>> : CheckSelect<T, Prisma__UserGroupClient<UserGroup | null >, Prisma__UserGroupClient<UserGroupGetPayload<T> | null >>

    /**
     * Find the first UserGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupFindFirstArgs} args - Arguments to find a UserGroup
     * @example
     * // Get one UserGroup
     * const userGroup = await prisma.userGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserGroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserGroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserGroup'> extends True ? CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>> : CheckSelect<T, Prisma__UserGroupClient<UserGroup | null >, Prisma__UserGroupClient<UserGroupGetPayload<T> | null >>

    /**
     * Find zero or more UserGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserGroups
     * const userGroups = await prisma.userGroup.findMany()
     * 
     * // Get first 10 UserGroups
     * const userGroups = await prisma.userGroup.findMany({ take: 10 })
     * 
     * // Only select the `groupId`
     * const userGroupWithGroupIdOnly = await prisma.userGroup.findMany({ select: { groupId: true } })
     * 
    **/
    findMany<T extends UserGroupFindManyArgs>(
      args?: SelectSubset<T, UserGroupFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserGroup>>, PrismaPromise<Array<UserGroupGetPayload<T>>>>

    /**
     * Create a UserGroup.
     * @param {UserGroupCreateArgs} args - Arguments to create a UserGroup.
     * @example
     * // Create one UserGroup
     * const UserGroup = await prisma.userGroup.create({
     *   data: {
     *     // ... data to create a UserGroup
     *   }
     * })
     * 
    **/
    create<T extends UserGroupCreateArgs>(
      args: SelectSubset<T, UserGroupCreateArgs>
    ): CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>>

    /**
     * Create many UserGroups.
     *     @param {UserGroupCreateManyArgs} args - Arguments to create many UserGroups.
     *     @example
     *     // Create many UserGroups
     *     const userGroup = await prisma.userGroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserGroupCreateManyArgs>(
      args?: SelectSubset<T, UserGroupCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserGroup.
     * @param {UserGroupDeleteArgs} args - Arguments to delete one UserGroup.
     * @example
     * // Delete one UserGroup
     * const UserGroup = await prisma.userGroup.delete({
     *   where: {
     *     // ... filter to delete one UserGroup
     *   }
     * })
     * 
    **/
    delete<T extends UserGroupDeleteArgs>(
      args: SelectSubset<T, UserGroupDeleteArgs>
    ): CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>>

    /**
     * Update one UserGroup.
     * @param {UserGroupUpdateArgs} args - Arguments to update one UserGroup.
     * @example
     * // Update one UserGroup
     * const userGroup = await prisma.userGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserGroupUpdateArgs>(
      args: SelectSubset<T, UserGroupUpdateArgs>
    ): CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>>

    /**
     * Delete zero or more UserGroups.
     * @param {UserGroupDeleteManyArgs} args - Arguments to filter UserGroups to delete.
     * @example
     * // Delete a few UserGroups
     * const { count } = await prisma.userGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserGroupDeleteManyArgs>(
      args?: SelectSubset<T, UserGroupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserGroups
     * const userGroup = await prisma.userGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserGroupUpdateManyArgs>(
      args: SelectSubset<T, UserGroupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserGroup.
     * @param {UserGroupUpsertArgs} args - Arguments to update or create a UserGroup.
     * @example
     * // Update or create a UserGroup
     * const userGroup = await prisma.userGroup.upsert({
     *   create: {
     *     // ... data to create a UserGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserGroup we want to update
     *   }
     * })
    **/
    upsert<T extends UserGroupUpsertArgs>(
      args: SelectSubset<T, UserGroupUpsertArgs>
    ): CheckSelect<T, Prisma__UserGroupClient<UserGroup>, Prisma__UserGroupClient<UserGroupGetPayload<T>>>

    /**
     * Count the number of UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupCountArgs} args - Arguments to filter UserGroups to count.
     * @example
     * // Count the number of UserGroups
     * const count = await prisma.userGroup.count({
     *   where: {
     *     // ... the filter for the UserGroups we want to count
     *   }
     * })
    **/
    count<T extends UserGroupCountArgs>(
      args?: Subset<T, UserGroupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserGroupAggregateArgs>(args: Subset<T, UserGroupAggregateArgs>): PrismaPromise<GetUserGroupAggregateType<T>>

    /**
     * Group by UserGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserGroupClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Postingan<T extends PostinganFindManyArgs = {}>(args?: Subset<T, PostinganFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Postingan>>, PrismaPromise<Array<PostinganGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserGroup findUnique
   */
  export type UserGroupFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * Throw an Error if a UserGroup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserGroup to fetch.
     * 
    **/
    where: UserGroupWhereUniqueInput
  }


  /**
   * UserGroup findFirst
   */
  export type UserGroupFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * Throw an Error if a UserGroup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserGroup to fetch.
     * 
    **/
    where?: UserGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<UserGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserGroups.
     * 
    **/
    cursor?: UserGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserGroups.
     * 
    **/
    distinct?: Enumerable<UserGroupScalarFieldEnum>
  }


  /**
   * UserGroup findMany
   */
  export type UserGroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * Filter, which UserGroups to fetch.
     * 
    **/
    where?: UserGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<UserGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserGroups.
     * 
    **/
    cursor?: UserGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserGroups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserGroupScalarFieldEnum>
  }


  /**
   * UserGroup create
   */
  export type UserGroupCreateArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * The data needed to create a UserGroup.
     * 
    **/
    data: XOR<UserGroupCreateInput, UserGroupUncheckedCreateInput>
  }


  /**
   * UserGroup createMany
   */
  export type UserGroupCreateManyArgs = {
    data: Enumerable<UserGroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserGroup update
   */
  export type UserGroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * The data needed to update a UserGroup.
     * 
    **/
    data: XOR<UserGroupUpdateInput, UserGroupUncheckedUpdateInput>
    /**
     * Choose, which UserGroup to update.
     * 
    **/
    where: UserGroupWhereUniqueInput
  }


  /**
   * UserGroup updateMany
   */
  export type UserGroupUpdateManyArgs = {
    data: XOR<UserGroupUpdateManyMutationInput, UserGroupUncheckedUpdateManyInput>
    where?: UserGroupWhereInput
  }


  /**
   * UserGroup upsert
   */
  export type UserGroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * The filter to search for the UserGroup to update in case it exists.
     * 
    **/
    where: UserGroupWhereUniqueInput
    /**
     * In case the UserGroup found by the `where` argument doesn't exist, create a new UserGroup with this data.
     * 
    **/
    create: XOR<UserGroupCreateInput, UserGroupUncheckedCreateInput>
    /**
     * In case the UserGroup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserGroupUpdateInput, UserGroupUncheckedUpdateInput>
  }


  /**
   * UserGroup delete
   */
  export type UserGroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
    /**
     * Filter which UserGroup to delete.
     * 
    **/
    where: UserGroupWhereUniqueInput
  }


  /**
   * UserGroup deleteMany
   */
  export type UserGroupDeleteManyArgs = {
    where?: UserGroupWhereInput
  }


  /**
   * UserGroup without action
   */
  export type UserGroupArgs = {
    /**
     * Select specific fields to fetch from the UserGroup
     * 
    **/
    select?: UserGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserGroupInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ContentScalarFieldEnum: {
    id: 'id',
    judul: 'judul',
    harga: 'harga',
    keterangan: 'keterangan'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const GambarScalarFieldEnum: {
    id: 'id',
    destination: 'destination',
    filename: 'filename',
    path: 'path',
    contentId: 'contentId'
  };

  export type GambarScalarFieldEnum = (typeof GambarScalarFieldEnum)[keyof typeof GambarScalarFieldEnum]


  export const PostinganScalarFieldEnum: {
    id: 'id',
    tanggal: 'tanggal',
    contentId: 'contentId',
    groupId: 'groupId',
    userId: 'userId',
    postingId: 'postingId'
  };

  export type PostinganScalarFieldEnum = (typeof PostinganScalarFieldEnum)[keyof typeof PostinganScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    data: 'data'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SessionBrowserScalarFieldEnum: {
    id: 'id'
  };

  export type SessionBrowserScalarFieldEnum = (typeof SessionBrowserScalarFieldEnum)[keyof typeof SessionBrowserScalarFieldEnum]


  export const ShareKeBanyakScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    tanggal: 'tanggal',
    userId: 'userId'
  };

  export type ShareKeBanyakScalarFieldEnum = (typeof ShareKeBanyakScalarFieldEnum)[keyof typeof ShareKeBanyakScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    active: 'active',
    desc: 'desc'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserGroupScalarFieldEnum: {
    groupId: 'groupId',
    name: 'name',
    url: 'url',
    userId: 'userId',
    jualBeli: 'jualBeli'
  };

  export type UserGroupScalarFieldEnum = (typeof UserGroupScalarFieldEnum)[keyof typeof UserGroupScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type ContentWhereInput = {
    AND?: Enumerable<ContentWhereInput>
    OR?: Enumerable<ContentWhereInput>
    NOT?: Enumerable<ContentWhereInput>
    id?: IntFilter | number
    judul?: StringFilter | string
    harga?: IntFilter | number
    keterangan?: StringFilter | string
    Gambar?: GambarListRelationFilter
    Postingan?: PostinganListRelationFilter
  }

  export type ContentOrderByWithRelationInput = {
    id?: SortOrder
    judul?: SortOrder
    harga?: SortOrder
    keterangan?: SortOrder
    Gambar?: GambarOrderByRelationAggregateInput
    Postingan?: PostinganOrderByRelationAggregateInput
  }

  export type ContentWhereUniqueInput = {
    id?: number
  }

  export type ContentOrderByWithAggregationInput = {
    id?: SortOrder
    judul?: SortOrder
    harga?: SortOrder
    keterangan?: SortOrder
    _count?: ContentCountOrderByAggregateInput
    _avg?: ContentAvgOrderByAggregateInput
    _max?: ContentMaxOrderByAggregateInput
    _min?: ContentMinOrderByAggregateInput
    _sum?: ContentSumOrderByAggregateInput
  }

  export type ContentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContentScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    judul?: StringWithAggregatesFilter | string
    harga?: IntWithAggregatesFilter | number
    keterangan?: StringWithAggregatesFilter | string
  }

  export type GambarWhereInput = {
    AND?: Enumerable<GambarWhereInput>
    OR?: Enumerable<GambarWhereInput>
    NOT?: Enumerable<GambarWhereInput>
    id?: IntFilter | number
    destination?: StringFilter | string
    filename?: StringFilter | string
    path?: StringFilter | string
    contentId?: IntFilter | number
    Content?: XOR<ContentRelationFilter, ContentWhereInput>
  }

  export type GambarOrderByWithRelationInput = {
    id?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    contentId?: SortOrder
    Content?: ContentOrderByWithRelationInput
  }

  export type GambarWhereUniqueInput = {
    id?: number
  }

  export type GambarOrderByWithAggregationInput = {
    id?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    contentId?: SortOrder
    _count?: GambarCountOrderByAggregateInput
    _avg?: GambarAvgOrderByAggregateInput
    _max?: GambarMaxOrderByAggregateInput
    _min?: GambarMinOrderByAggregateInput
    _sum?: GambarSumOrderByAggregateInput
  }

  export type GambarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GambarScalarWhereWithAggregatesInput>
    OR?: Enumerable<GambarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GambarScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    destination?: StringWithAggregatesFilter | string
    filename?: StringWithAggregatesFilter | string
    path?: StringWithAggregatesFilter | string
    contentId?: IntWithAggregatesFilter | number
  }

  export type PostinganWhereInput = {
    AND?: Enumerable<PostinganWhereInput>
    OR?: Enumerable<PostinganWhereInput>
    NOT?: Enumerable<PostinganWhereInput>
    id?: IntFilter | number
    tanggal?: DateTimeFilter | Date | string
    contentId?: IntFilter | number
    groupId?: StringFilter | string
    userId?: IntFilter | number
    postingId?: StringFilter | string
    Content?: XOR<ContentRelationFilter, ContentWhereInput>
    UserGroup?: XOR<UserGroupRelationFilter, UserGroupWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PostinganOrderByWithRelationInput = {
    id?: SortOrder
    tanggal?: SortOrder
    contentId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    postingId?: SortOrder
    Content?: ContentOrderByWithRelationInput
    UserGroup?: UserGroupOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type PostinganWhereUniqueInput = {
    id?: number
  }

  export type PostinganOrderByWithAggregationInput = {
    id?: SortOrder
    tanggal?: SortOrder
    contentId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    postingId?: SortOrder
    _count?: PostinganCountOrderByAggregateInput
    _avg?: PostinganAvgOrderByAggregateInput
    _max?: PostinganMaxOrderByAggregateInput
    _min?: PostinganMinOrderByAggregateInput
    _sum?: PostinganSumOrderByAggregateInput
  }

  export type PostinganScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostinganScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostinganScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostinganScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tanggal?: DateTimeWithAggregatesFilter | Date | string
    contentId?: IntWithAggregatesFilter | number
    groupId?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    postingId?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    data?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: number
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    data?: StringWithAggregatesFilter | string
  }

  export type SessionBrowserWhereInput = {
    AND?: Enumerable<SessionBrowserWhereInput>
    OR?: Enumerable<SessionBrowserWhereInput>
    NOT?: Enumerable<SessionBrowserWhereInput>
    id?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionBrowserOrderByWithRelationInput = {
    id?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionBrowserWhereUniqueInput = {
    id?: number
  }

  export type SessionBrowserOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: SessionBrowserCountOrderByAggregateInput
    _avg?: SessionBrowserAvgOrderByAggregateInput
    _max?: SessionBrowserMaxOrderByAggregateInput
    _min?: SessionBrowserMinOrderByAggregateInput
    _sum?: SessionBrowserSumOrderByAggregateInput
  }

  export type SessionBrowserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionBrowserScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionBrowserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionBrowserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
  }

  export type ShareKeBanyakWhereInput = {
    AND?: Enumerable<ShareKeBanyakWhereInput>
    OR?: Enumerable<ShareKeBanyakWhereInput>
    NOT?: Enumerable<ShareKeBanyakWhereInput>
    id?: IntFilter | number
    groupName?: StringFilter | string
    tanggal?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShareKeBanyakOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    tanggal?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type ShareKeBanyakWhereUniqueInput = {
    id?: number
  }

  export type ShareKeBanyakOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    tanggal?: SortOrder
    userId?: SortOrder
    _count?: ShareKeBanyakCountOrderByAggregateInput
    _avg?: ShareKeBanyakAvgOrderByAggregateInput
    _max?: ShareKeBanyakMaxOrderByAggregateInput
    _min?: ShareKeBanyakMinOrderByAggregateInput
    _sum?: ShareKeBanyakSumOrderByAggregateInput
  }

  export type ShareKeBanyakScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShareKeBanyakScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShareKeBanyakScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShareKeBanyakScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    groupName?: StringWithAggregatesFilter | string
    tanggal?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    active?: BoolFilter | boolean
    desc?: StringNullableFilter | string | null
    Postingan?: PostinganListRelationFilter
    Session?: XOR<SessionRelationFilter, SessionWhereInput> | null
    SessionBrowser?: XOR<SessionBrowserRelationFilter, SessionBrowserWhereInput> | null
    ShareKeBanyak?: ShareKeBanyakListRelationFilter
    UserGroup?: UserGroupListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    desc?: SortOrder
    Postingan?: PostinganOrderByRelationAggregateInput
    Session?: SessionOrderByWithRelationInput
    SessionBrowser?: SessionBrowserOrderByWithRelationInput
    ShareKeBanyak?: ShareKeBanyakOrderByRelationAggregateInput
    UserGroup?: UserGroupOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    desc?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    desc?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserGroupWhereInput = {
    AND?: Enumerable<UserGroupWhereInput>
    OR?: Enumerable<UserGroupWhereInput>
    NOT?: Enumerable<UserGroupWhereInput>
    groupId?: StringFilter | string
    name?: StringFilter | string
    url?: StringFilter | string
    userId?: IntFilter | number
    jualBeli?: BoolNullableFilter | boolean | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Postingan?: PostinganListRelationFilter
  }

  export type UserGroupOrderByWithRelationInput = {
    groupId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    jualBeli?: SortOrder
    User?: UserOrderByWithRelationInput
    Postingan?: PostinganOrderByRelationAggregateInput
  }

  export type UserGroupWhereUniqueInput = {
    groupId_userId?: UserGroupGroupIdUserIdCompoundUniqueInput
  }

  export type UserGroupOrderByWithAggregationInput = {
    groupId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    jualBeli?: SortOrder
    _count?: UserGroupCountOrderByAggregateInput
    _avg?: UserGroupAvgOrderByAggregateInput
    _max?: UserGroupMaxOrderByAggregateInput
    _min?: UserGroupMinOrderByAggregateInput
    _sum?: UserGroupSumOrderByAggregateInput
  }

  export type UserGroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserGroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserGroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserGroupScalarWhereWithAggregatesInput>
    groupId?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    jualBeli?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type ContentCreateInput = {
    judul: string
    harga: number
    keterangan: string
    Gambar?: GambarCreateNestedManyWithoutContentInput
    Postingan?: PostinganCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateInput = {
    id?: number
    judul: string
    harga: number
    keterangan: string
    Gambar?: GambarUncheckedCreateNestedManyWithoutContentInput
    Postingan?: PostinganUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentUpdateInput = {
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Gambar?: GambarUpdateManyWithoutContentInput
    Postingan?: PostinganUpdateManyWithoutContentInput
  }

  export type ContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Gambar?: GambarUncheckedUpdateManyWithoutContentInput
    Postingan?: PostinganUncheckedUpdateManyWithoutContentInput
  }

  export type ContentCreateManyInput = {
    id?: number
    judul: string
    harga: number
    keterangan: string
  }

  export type ContentUpdateManyMutationInput = {
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
  }

  export type ContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
  }

  export type GambarCreateInput = {
    destination: string
    filename: string
    path: string
    Content: ContentCreateNestedOneWithoutGambarInput
  }

  export type GambarUncheckedCreateInput = {
    id?: number
    destination: string
    filename: string
    path: string
    contentId: number
  }

  export type GambarUpdateInput = {
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    Content?: ContentUpdateOneRequiredWithoutGambarInput
  }

  export type GambarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type GambarCreateManyInput = {
    id?: number
    destination: string
    filename: string
    path: string
    contentId: number
  }

  export type GambarUpdateManyMutationInput = {
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type GambarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type PostinganCreateInput = {
    tanggal?: Date | string
    postingId: string
    Content: ContentCreateNestedOneWithoutPostinganInput
    UserGroup: UserGroupCreateNestedOneWithoutPostinganInput
    User: UserCreateNestedOneWithoutPostinganInput
  }

  export type PostinganUncheckedCreateInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    groupId: string
    userId: number
    postingId: string
  }

  export type PostinganUpdateInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    postingId?: StringFieldUpdateOperationsInput | string
    Content?: ContentUpdateOneRequiredWithoutPostinganInput
    UserGroup?: UserGroupUpdateOneRequiredWithoutPostinganInput
    User?: UserUpdateOneRequiredWithoutPostinganInput
  }

  export type PostinganUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    contentId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type PostinganCreateManyInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    groupId: string
    userId: number
    postingId: string
  }

  export type PostinganUpdateManyMutationInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type PostinganUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    contentId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    data: string
    User?: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    data: string
  }

  export type SessionUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutSessionInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: number
    data: string
  }

  export type SessionUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionBrowserCreateInput = {
    User?: UserCreateNestedOneWithoutSessionBrowserInput
  }

  export type SessionBrowserUncheckedCreateInput = {
    id?: number
  }

  export type SessionBrowserUpdateInput = {
    User?: UserUpdateOneRequiredWithoutSessionBrowserInput
  }

  export type SessionBrowserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type SessionBrowserCreateManyInput = {
    id?: number
  }

  export type SessionBrowserUpdateManyMutationInput = {

  }

  export type SessionBrowserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ShareKeBanyakCreateInput = {
    groupName: string
    tanggal: Date | string
    User: UserCreateNestedOneWithoutShareKeBanyakInput
  }

  export type ShareKeBanyakUncheckedCreateInput = {
    id?: number
    groupName: string
    tanggal: Date | string
    userId: number
  }

  export type ShareKeBanyakUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutShareKeBanyakInput
  }

  export type ShareKeBanyakUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ShareKeBanyakCreateManyInput = {
    id?: number
    groupName: string
    tanggal: Date | string
    userId: number
  }

  export type ShareKeBanyakUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareKeBanyakUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUpdateManyWithoutUserInput
    Session?: SessionUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUpdateManyWithoutUserInput
    UserGroup?: UserGroupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserInput
    Session?: SessionUncheckedUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedUpdateManyWithoutUserInput
    UserGroup?: UserGroupUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserGroupCreateInput = {
    groupId: string
    name: string
    url: string
    jualBeli?: boolean | null
    User: UserCreateNestedOneWithoutUserGroupInput
    Postingan?: PostinganCreateNestedManyWithoutUserGroupInput
  }

  export type UserGroupUncheckedCreateInput = {
    groupId: string
    name: string
    url: string
    userId: number
    jualBeli?: boolean | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserGroupInput
  }

  export type UserGroupUpdateInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
    User?: UserUpdateOneRequiredWithoutUserGroupInput
    Postingan?: PostinganUpdateManyWithoutUserGroupInput
  }

  export type UserGroupUncheckedUpdateInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserGroupInput
  }

  export type UserGroupCreateManyInput = {
    groupId: string
    name: string
    url: string
    userId: number
    jualBeli?: boolean | null
  }

  export type UserGroupUpdateManyMutationInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserGroupUncheckedUpdateManyInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type GambarListRelationFilter = {
    every?: GambarWhereInput
    some?: GambarWhereInput
    none?: GambarWhereInput
  }

  export type PostinganListRelationFilter = {
    every?: PostinganWhereInput
    some?: PostinganWhereInput
    none?: PostinganWhereInput
  }

  export type GambarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostinganOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentCountOrderByAggregateInput = {
    id?: SortOrder
    judul?: SortOrder
    harga?: SortOrder
    keterangan?: SortOrder
  }

  export type ContentAvgOrderByAggregateInput = {
    id?: SortOrder
    harga?: SortOrder
  }

  export type ContentMaxOrderByAggregateInput = {
    id?: SortOrder
    judul?: SortOrder
    harga?: SortOrder
    keterangan?: SortOrder
  }

  export type ContentMinOrderByAggregateInput = {
    id?: SortOrder
    judul?: SortOrder
    harga?: SortOrder
    keterangan?: SortOrder
  }

  export type ContentSumOrderByAggregateInput = {
    id?: SortOrder
    harga?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ContentRelationFilter = {
    is?: ContentWhereInput
    isNot?: ContentWhereInput
  }

  export type GambarCountOrderByAggregateInput = {
    id?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    contentId?: SortOrder
  }

  export type GambarAvgOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type GambarMaxOrderByAggregateInput = {
    id?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    contentId?: SortOrder
  }

  export type GambarMinOrderByAggregateInput = {
    id?: SortOrder
    destination?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    contentId?: SortOrder
  }

  export type GambarSumOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserGroupRelationFilter = {
    is?: UserGroupWhereInput
    isNot?: UserGroupWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PostinganCountOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    contentId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    postingId?: SortOrder
  }

  export type PostinganAvgOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
    userId?: SortOrder
  }

  export type PostinganMaxOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    contentId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    postingId?: SortOrder
  }

  export type PostinganMinOrderByAggregateInput = {
    id?: SortOrder
    tanggal?: SortOrder
    contentId?: SortOrder
    groupId?: SortOrder
    userId?: SortOrder
    postingId?: SortOrder
  }

  export type PostinganSumOrderByAggregateInput = {
    id?: SortOrder
    contentId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionBrowserCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionBrowserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionBrowserMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionBrowserMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionBrowserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShareKeBanyakCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    tanggal?: SortOrder
    userId?: SortOrder
  }

  export type ShareKeBanyakAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShareKeBanyakMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    tanggal?: SortOrder
    userId?: SortOrder
  }

  export type ShareKeBanyakMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    tanggal?: SortOrder
    userId?: SortOrder
  }

  export type ShareKeBanyakSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type SessionBrowserRelationFilter = {
    is?: SessionBrowserWhereInput | null
    isNot?: SessionBrowserWhereInput | null
  }

  export type ShareKeBanyakListRelationFilter = {
    every?: ShareKeBanyakWhereInput
    some?: ShareKeBanyakWhereInput
    none?: ShareKeBanyakWhereInput
  }

  export type UserGroupListRelationFilter = {
    every?: UserGroupWhereInput
    some?: UserGroupWhereInput
    none?: UserGroupWhereInput
  }

  export type ShareKeBanyakOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    desc?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    desc?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    active?: SortOrder
    desc?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type UserGroupGroupIdUserIdCompoundUniqueInput = {
    groupId: string
    userId: number
  }

  export type UserGroupCountOrderByAggregateInput = {
    groupId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    jualBeli?: SortOrder
  }

  export type UserGroupAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserGroupMaxOrderByAggregateInput = {
    groupId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    jualBeli?: SortOrder
  }

  export type UserGroupMinOrderByAggregateInput = {
    groupId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    userId?: SortOrder
    jualBeli?: SortOrder
  }

  export type UserGroupSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type GambarCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<GambarCreateWithoutContentInput>, Enumerable<GambarUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<GambarCreateOrConnectWithoutContentInput>
    createMany?: GambarCreateManyContentInputEnvelope
    connect?: Enumerable<GambarWhereUniqueInput>
  }

  export type PostinganCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutContentInput>, Enumerable<PostinganUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutContentInput>
    createMany?: PostinganCreateManyContentInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type GambarUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<GambarCreateWithoutContentInput>, Enumerable<GambarUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<GambarCreateOrConnectWithoutContentInput>
    createMany?: GambarCreateManyContentInputEnvelope
    connect?: Enumerable<GambarWhereUniqueInput>
  }

  export type PostinganUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutContentInput>, Enumerable<PostinganUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutContentInput>
    createMany?: PostinganCreateManyContentInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GambarUpdateManyWithoutContentInput = {
    create?: XOR<Enumerable<GambarCreateWithoutContentInput>, Enumerable<GambarUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<GambarCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<GambarUpsertWithWhereUniqueWithoutContentInput>
    createMany?: GambarCreateManyContentInputEnvelope
    set?: Enumerable<GambarWhereUniqueInput>
    disconnect?: Enumerable<GambarWhereUniqueInput>
    delete?: Enumerable<GambarWhereUniqueInput>
    connect?: Enumerable<GambarWhereUniqueInput>
    update?: Enumerable<GambarUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<GambarUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<GambarScalarWhereInput>
  }

  export type PostinganUpdateManyWithoutContentInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutContentInput>, Enumerable<PostinganUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutContentInput>
    createMany?: PostinganCreateManyContentInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type GambarUncheckedUpdateManyWithoutContentInput = {
    create?: XOR<Enumerable<GambarCreateWithoutContentInput>, Enumerable<GambarUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<GambarCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<GambarUpsertWithWhereUniqueWithoutContentInput>
    createMany?: GambarCreateManyContentInputEnvelope
    set?: Enumerable<GambarWhereUniqueInput>
    disconnect?: Enumerable<GambarWhereUniqueInput>
    delete?: Enumerable<GambarWhereUniqueInput>
    connect?: Enumerable<GambarWhereUniqueInput>
    update?: Enumerable<GambarUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<GambarUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<GambarScalarWhereInput>
  }

  export type PostinganUncheckedUpdateManyWithoutContentInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutContentInput>, Enumerable<PostinganUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutContentInput>
    createMany?: PostinganCreateManyContentInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type ContentCreateNestedOneWithoutGambarInput = {
    create?: XOR<ContentCreateWithoutGambarInput, ContentUncheckedCreateWithoutGambarInput>
    connectOrCreate?: ContentCreateOrConnectWithoutGambarInput
    connect?: ContentWhereUniqueInput
  }

  export type ContentUpdateOneRequiredWithoutGambarInput = {
    create?: XOR<ContentCreateWithoutGambarInput, ContentUncheckedCreateWithoutGambarInput>
    connectOrCreate?: ContentCreateOrConnectWithoutGambarInput
    upsert?: ContentUpsertWithoutGambarInput
    connect?: ContentWhereUniqueInput
    update?: XOR<ContentUpdateWithoutGambarInput, ContentUncheckedUpdateWithoutGambarInput>
  }

  export type ContentCreateNestedOneWithoutPostinganInput = {
    create?: XOR<ContentCreateWithoutPostinganInput, ContentUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPostinganInput
    connect?: ContentWhereUniqueInput
  }

  export type UserGroupCreateNestedOneWithoutPostinganInput = {
    create?: XOR<UserGroupCreateWithoutPostinganInput, UserGroupUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: UserGroupCreateOrConnectWithoutPostinganInput
    connect?: UserGroupWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPostinganInput = {
    create?: XOR<UserCreateWithoutPostinganInput, UserUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostinganInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContentUpdateOneRequiredWithoutPostinganInput = {
    create?: XOR<ContentCreateWithoutPostinganInput, ContentUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPostinganInput
    upsert?: ContentUpsertWithoutPostinganInput
    connect?: ContentWhereUniqueInput
    update?: XOR<ContentUpdateWithoutPostinganInput, ContentUncheckedUpdateWithoutPostinganInput>
  }

  export type UserGroupUpdateOneRequiredWithoutPostinganInput = {
    create?: XOR<UserGroupCreateWithoutPostinganInput, UserGroupUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: UserGroupCreateOrConnectWithoutPostinganInput
    upsert?: UserGroupUpsertWithoutPostinganInput
    connect?: UserGroupWhereUniqueInput
    update?: XOR<UserGroupUpdateWithoutPostinganInput, UserGroupUncheckedUpdateWithoutPostinganInput>
  }

  export type UserUpdateOneRequiredWithoutPostinganInput = {
    create?: XOR<UserCreateWithoutPostinganInput, UserUncheckedCreateWithoutPostinganInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostinganInput
    upsert?: UserUpsertWithoutPostinganInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostinganInput, UserUncheckedUpdateWithoutPostinganInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type UserCreateNestedOneWithoutSessionBrowserInput = {
    create?: XOR<UserCreateWithoutSessionBrowserInput, UserUncheckedCreateWithoutSessionBrowserInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionBrowserInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionBrowserInput = {
    create?: XOR<UserCreateWithoutSessionBrowserInput, UserUncheckedCreateWithoutSessionBrowserInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionBrowserInput
    upsert?: UserUpsertWithoutSessionBrowserInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionBrowserInput, UserUncheckedUpdateWithoutSessionBrowserInput>
  }

  export type UserCreateNestedOneWithoutShareKeBanyakInput = {
    create?: XOR<UserCreateWithoutShareKeBanyakInput, UserUncheckedCreateWithoutShareKeBanyakInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareKeBanyakInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShareKeBanyakInput = {
    create?: XOR<UserCreateWithoutShareKeBanyakInput, UserUncheckedCreateWithoutShareKeBanyakInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareKeBanyakInput
    upsert?: UserUpsertWithoutShareKeBanyakInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShareKeBanyakInput, UserUncheckedUpdateWithoutShareKeBanyakInput>
  }

  export type PostinganCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserInput>, Enumerable<PostinganUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserInput>
    createMany?: PostinganCreateManyUserInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type SessionCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type SessionBrowserCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionBrowserCreateWithoutUserInput, SessionBrowserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionBrowserCreateOrConnectWithoutUserInput
    connect?: SessionBrowserWhereUniqueInput
  }

  export type ShareKeBanyakCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareKeBanyakCreateWithoutUserInput>, Enumerable<ShareKeBanyakUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareKeBanyakCreateOrConnectWithoutUserInput>
    createMany?: ShareKeBanyakCreateManyUserInputEnvelope
    connect?: Enumerable<ShareKeBanyakWhereUniqueInput>
  }

  export type UserGroupCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserGroupCreateWithoutUserInput>, Enumerable<UserGroupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserGroupCreateOrConnectWithoutUserInput>
    createMany?: UserGroupCreateManyUserInputEnvelope
    connect?: Enumerable<UserGroupWhereUniqueInput>
  }

  export type PostinganUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserInput>, Enumerable<PostinganUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserInput>
    createMany?: PostinganCreateManyUserInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type SessionBrowserUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionBrowserCreateWithoutUserInput, SessionBrowserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionBrowserCreateOrConnectWithoutUserInput
    connect?: SessionBrowserWhereUniqueInput
  }

  export type ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareKeBanyakCreateWithoutUserInput>, Enumerable<ShareKeBanyakUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareKeBanyakCreateOrConnectWithoutUserInput>
    createMany?: ShareKeBanyakCreateManyUserInputEnvelope
    connect?: Enumerable<ShareKeBanyakWhereUniqueInput>
  }

  export type UserGroupUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserGroupCreateWithoutUserInput>, Enumerable<UserGroupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserGroupCreateOrConnectWithoutUserInput>
    createMany?: UserGroupCreateManyUserInputEnvelope
    connect?: Enumerable<UserGroupWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PostinganUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserInput>, Enumerable<PostinganUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostinganCreateManyUserInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type SessionUpdateOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionBrowserUpdateOneWithoutUserInput = {
    create?: XOR<SessionBrowserCreateWithoutUserInput, SessionBrowserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionBrowserCreateOrConnectWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SessionBrowserWhereUniqueInput
    update?: XOR<SessionBrowserUpdateWithoutUserInput, SessionBrowserUncheckedUpdateWithoutUserInput>
  }

  export type ShareKeBanyakUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareKeBanyakCreateWithoutUserInput>, Enumerable<ShareKeBanyakUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareKeBanyakCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShareKeBanyakUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShareKeBanyakCreateManyUserInputEnvelope
    set?: Enumerable<ShareKeBanyakWhereUniqueInput>
    disconnect?: Enumerable<ShareKeBanyakWhereUniqueInput>
    delete?: Enumerable<ShareKeBanyakWhereUniqueInput>
    connect?: Enumerable<ShareKeBanyakWhereUniqueInput>
    update?: Enumerable<ShareKeBanyakUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShareKeBanyakUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShareKeBanyakScalarWhereInput>
  }

  export type UserGroupUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserGroupCreateWithoutUserInput>, Enumerable<UserGroupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserGroupCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserGroupUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserGroupCreateManyUserInputEnvelope
    set?: Enumerable<UserGroupWhereUniqueInput>
    disconnect?: Enumerable<UserGroupWhereUniqueInput>
    delete?: Enumerable<UserGroupWhereUniqueInput>
    connect?: Enumerable<UserGroupWhereUniqueInput>
    update?: Enumerable<UserGroupUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserGroupUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserGroupScalarWhereInput>
  }

  export type PostinganUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserInput>, Enumerable<PostinganUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostinganCreateManyUserInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type SessionUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionBrowserUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<SessionBrowserCreateWithoutUserInput, SessionBrowserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionBrowserCreateOrConnectWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: SessionBrowserWhereUniqueInput
    update?: XOR<SessionBrowserUpdateWithoutUserInput, SessionBrowserUncheckedUpdateWithoutUserInput>
  }

  export type ShareKeBanyakUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareKeBanyakCreateWithoutUserInput>, Enumerable<ShareKeBanyakUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareKeBanyakCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShareKeBanyakUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShareKeBanyakCreateManyUserInputEnvelope
    set?: Enumerable<ShareKeBanyakWhereUniqueInput>
    disconnect?: Enumerable<ShareKeBanyakWhereUniqueInput>
    delete?: Enumerable<ShareKeBanyakWhereUniqueInput>
    connect?: Enumerable<ShareKeBanyakWhereUniqueInput>
    update?: Enumerable<ShareKeBanyakUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShareKeBanyakUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShareKeBanyakScalarWhereInput>
  }

  export type UserGroupUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserGroupCreateWithoutUserInput>, Enumerable<UserGroupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserGroupCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserGroupUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserGroupCreateManyUserInputEnvelope
    set?: Enumerable<UserGroupWhereUniqueInput>
    disconnect?: Enumerable<UserGroupWhereUniqueInput>
    delete?: Enumerable<UserGroupWhereUniqueInput>
    connect?: Enumerable<UserGroupWhereUniqueInput>
    update?: Enumerable<UserGroupUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserGroupUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserGroupScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserGroupInput = {
    create?: XOR<UserCreateWithoutUserGroupInput, UserUncheckedCreateWithoutUserGroupInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserGroupInput
    connect?: UserWhereUniqueInput
  }

  export type PostinganCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserGroupInput>, Enumerable<PostinganUncheckedCreateWithoutUserGroupInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserGroupInput>
    createMany?: PostinganCreateManyUserGroupInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type PostinganUncheckedCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserGroupInput>, Enumerable<PostinganUncheckedCreateWithoutUserGroupInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserGroupInput>
    createMany?: PostinganCreateManyUserGroupInputEnvelope
    connect?: Enumerable<PostinganWhereUniqueInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutUserGroupInput = {
    create?: XOR<UserCreateWithoutUserGroupInput, UserUncheckedCreateWithoutUserGroupInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserGroupInput
    upsert?: UserUpsertWithoutUserGroupInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserGroupInput, UserUncheckedUpdateWithoutUserGroupInput>
  }

  export type PostinganUpdateManyWithoutUserGroupInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserGroupInput>, Enumerable<PostinganUncheckedCreateWithoutUserGroupInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserGroupInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutUserGroupInput>
    createMany?: PostinganCreateManyUserGroupInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutUserGroupInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutUserGroupInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type PostinganUncheckedUpdateManyWithoutUserGroupInput = {
    create?: XOR<Enumerable<PostinganCreateWithoutUserGroupInput>, Enumerable<PostinganUncheckedCreateWithoutUserGroupInput>>
    connectOrCreate?: Enumerable<PostinganCreateOrConnectWithoutUserGroupInput>
    upsert?: Enumerable<PostinganUpsertWithWhereUniqueWithoutUserGroupInput>
    createMany?: PostinganCreateManyUserGroupInputEnvelope
    set?: Enumerable<PostinganWhereUniqueInput>
    disconnect?: Enumerable<PostinganWhereUniqueInput>
    delete?: Enumerable<PostinganWhereUniqueInput>
    connect?: Enumerable<PostinganWhereUniqueInput>
    update?: Enumerable<PostinganUpdateWithWhereUniqueWithoutUserGroupInput>
    updateMany?: Enumerable<PostinganUpdateManyWithWhereWithoutUserGroupInput>
    deleteMany?: Enumerable<PostinganScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type GambarCreateWithoutContentInput = {
    destination: string
    filename: string
    path: string
  }

  export type GambarUncheckedCreateWithoutContentInput = {
    id?: number
    destination: string
    filename: string
    path: string
  }

  export type GambarCreateOrConnectWithoutContentInput = {
    where: GambarWhereUniqueInput
    create: XOR<GambarCreateWithoutContentInput, GambarUncheckedCreateWithoutContentInput>
  }

  export type GambarCreateManyContentInputEnvelope = {
    data: Enumerable<GambarCreateManyContentInput>
    skipDuplicates?: boolean
  }

  export type PostinganCreateWithoutContentInput = {
    tanggal?: Date | string
    postingId: string
    UserGroup: UserGroupCreateNestedOneWithoutPostinganInput
    User: UserCreateNestedOneWithoutPostinganInput
  }

  export type PostinganUncheckedCreateWithoutContentInput = {
    id?: number
    tanggal?: Date | string
    groupId: string
    userId: number
    postingId: string
  }

  export type PostinganCreateOrConnectWithoutContentInput = {
    where: PostinganWhereUniqueInput
    create: XOR<PostinganCreateWithoutContentInput, PostinganUncheckedCreateWithoutContentInput>
  }

  export type PostinganCreateManyContentInputEnvelope = {
    data: Enumerable<PostinganCreateManyContentInput>
    skipDuplicates?: boolean
  }

  export type GambarUpsertWithWhereUniqueWithoutContentInput = {
    where: GambarWhereUniqueInput
    update: XOR<GambarUpdateWithoutContentInput, GambarUncheckedUpdateWithoutContentInput>
    create: XOR<GambarCreateWithoutContentInput, GambarUncheckedCreateWithoutContentInput>
  }

  export type GambarUpdateWithWhereUniqueWithoutContentInput = {
    where: GambarWhereUniqueInput
    data: XOR<GambarUpdateWithoutContentInput, GambarUncheckedUpdateWithoutContentInput>
  }

  export type GambarUpdateManyWithWhereWithoutContentInput = {
    where: GambarScalarWhereInput
    data: XOR<GambarUpdateManyMutationInput, GambarUncheckedUpdateManyWithoutGambarInput>
  }

  export type GambarScalarWhereInput = {
    AND?: Enumerable<GambarScalarWhereInput>
    OR?: Enumerable<GambarScalarWhereInput>
    NOT?: Enumerable<GambarScalarWhereInput>
    id?: IntFilter | number
    destination?: StringFilter | string
    filename?: StringFilter | string
    path?: StringFilter | string
    contentId?: IntFilter | number
  }

  export type PostinganUpsertWithWhereUniqueWithoutContentInput = {
    where: PostinganWhereUniqueInput
    update: XOR<PostinganUpdateWithoutContentInput, PostinganUncheckedUpdateWithoutContentInput>
    create: XOR<PostinganCreateWithoutContentInput, PostinganUncheckedCreateWithoutContentInput>
  }

  export type PostinganUpdateWithWhereUniqueWithoutContentInput = {
    where: PostinganWhereUniqueInput
    data: XOR<PostinganUpdateWithoutContentInput, PostinganUncheckedUpdateWithoutContentInput>
  }

  export type PostinganUpdateManyWithWhereWithoutContentInput = {
    where: PostinganScalarWhereInput
    data: XOR<PostinganUpdateManyMutationInput, PostinganUncheckedUpdateManyWithoutPostinganInput>
  }

  export type PostinganScalarWhereInput = {
    AND?: Enumerable<PostinganScalarWhereInput>
    OR?: Enumerable<PostinganScalarWhereInput>
    NOT?: Enumerable<PostinganScalarWhereInput>
    id?: IntFilter | number
    tanggal?: DateTimeFilter | Date | string
    contentId?: IntFilter | number
    groupId?: StringFilter | string
    userId?: IntFilter | number
    postingId?: StringFilter | string
  }

  export type ContentCreateWithoutGambarInput = {
    judul: string
    harga: number
    keterangan: string
    Postingan?: PostinganCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutGambarInput = {
    id?: number
    judul: string
    harga: number
    keterangan: string
    Postingan?: PostinganUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutGambarInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutGambarInput, ContentUncheckedCreateWithoutGambarInput>
  }

  export type ContentUpsertWithoutGambarInput = {
    update: XOR<ContentUpdateWithoutGambarInput, ContentUncheckedUpdateWithoutGambarInput>
    create: XOR<ContentCreateWithoutGambarInput, ContentUncheckedCreateWithoutGambarInput>
  }

  export type ContentUpdateWithoutGambarInput = {
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Postingan?: PostinganUpdateManyWithoutContentInput
  }

  export type ContentUncheckedUpdateWithoutGambarInput = {
    id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Postingan?: PostinganUncheckedUpdateManyWithoutContentInput
  }

  export type ContentCreateWithoutPostinganInput = {
    judul: string
    harga: number
    keterangan: string
    Gambar?: GambarCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutPostinganInput = {
    id?: number
    judul: string
    harga: number
    keterangan: string
    Gambar?: GambarUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutPostinganInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutPostinganInput, ContentUncheckedCreateWithoutPostinganInput>
  }

  export type UserGroupCreateWithoutPostinganInput = {
    groupId: string
    name: string
    url: string
    jualBeli?: boolean | null
    User: UserCreateNestedOneWithoutUserGroupInput
  }

  export type UserGroupUncheckedCreateWithoutPostinganInput = {
    groupId: string
    name: string
    url: string
    userId: number
    jualBeli?: boolean | null
  }

  export type UserGroupCreateOrConnectWithoutPostinganInput = {
    where: UserGroupWhereUniqueInput
    create: XOR<UserGroupCreateWithoutPostinganInput, UserGroupUncheckedCreateWithoutPostinganInput>
  }

  export type UserCreateWithoutPostinganInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Session?: SessionCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostinganInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostinganInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostinganInput, UserUncheckedCreateWithoutPostinganInput>
  }

  export type ContentUpsertWithoutPostinganInput = {
    update: XOR<ContentUpdateWithoutPostinganInput, ContentUncheckedUpdateWithoutPostinganInput>
    create: XOR<ContentCreateWithoutPostinganInput, ContentUncheckedCreateWithoutPostinganInput>
  }

  export type ContentUpdateWithoutPostinganInput = {
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Gambar?: GambarUpdateManyWithoutContentInput
  }

  export type ContentUncheckedUpdateWithoutPostinganInput = {
    id?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    harga?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    Gambar?: GambarUncheckedUpdateManyWithoutContentInput
  }

  export type UserGroupUpsertWithoutPostinganInput = {
    update: XOR<UserGroupUpdateWithoutPostinganInput, UserGroupUncheckedUpdateWithoutPostinganInput>
    create: XOR<UserGroupCreateWithoutPostinganInput, UserGroupUncheckedCreateWithoutPostinganInput>
  }

  export type UserGroupUpdateWithoutPostinganInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
    User?: UserUpdateOneRequiredWithoutUserGroupInput
  }

  export type UserGroupUncheckedUpdateWithoutPostinganInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUpsertWithoutPostinganInput = {
    update: XOR<UserUpdateWithoutPostinganInput, UserUncheckedUpdateWithoutPostinganInput>
    create: XOR<UserCreateWithoutPostinganInput, UserUncheckedCreateWithoutPostinganInput>
  }

  export type UserUpdateWithoutPostinganInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUpdateManyWithoutUserInput
    UserGroup?: UserGroupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPostinganInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedUpdateManyWithoutUserInput
    UserGroup?: UserGroupUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutSessionInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganCreateNestedManyWithoutUserInput
    SessionBrowser?: SessionBrowserCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUpdateManyWithoutUserInput
    SessionBrowser?: SessionBrowserUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUpdateManyWithoutUserInput
    UserGroup?: UserGroupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedUpdateManyWithoutUserInput
    UserGroup?: UserGroupUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutSessionBrowserInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionBrowserInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput
    UserGroup?: UserGroupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionBrowserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionBrowserInput, UserUncheckedCreateWithoutSessionBrowserInput>
  }

  export type UserUpsertWithoutSessionBrowserInput = {
    update: XOR<UserUpdateWithoutSessionBrowserInput, UserUncheckedUpdateWithoutSessionBrowserInput>
    create: XOR<UserCreateWithoutSessionBrowserInput, UserUncheckedCreateWithoutSessionBrowserInput>
  }

  export type UserUpdateWithoutSessionBrowserInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUpdateManyWithoutUserInput
    Session?: SessionUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUpdateManyWithoutUserInput
    UserGroup?: UserGroupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSessionBrowserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserInput
    Session?: SessionUncheckedUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedUpdateManyWithoutUserInput
    UserGroup?: UserGroupUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutShareKeBanyakInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserCreateNestedOneWithoutUserInput
    UserGroup?: UserGroupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShareKeBanyakInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedCreateNestedOneWithoutUserInput
    UserGroup?: UserGroupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShareKeBanyakInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShareKeBanyakInput, UserUncheckedCreateWithoutShareKeBanyakInput>
  }

  export type UserUpsertWithoutShareKeBanyakInput = {
    update: XOR<UserUpdateWithoutShareKeBanyakInput, UserUncheckedUpdateWithoutShareKeBanyakInput>
    create: XOR<UserCreateWithoutShareKeBanyakInput, UserUncheckedCreateWithoutShareKeBanyakInput>
  }

  export type UserUpdateWithoutShareKeBanyakInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUpdateManyWithoutUserInput
    Session?: SessionUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUpdateOneWithoutUserInput
    UserGroup?: UserGroupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutShareKeBanyakInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserInput
    Session?: SessionUncheckedUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedUpdateOneWithoutUserInput
    UserGroup?: UserGroupUncheckedUpdateManyWithoutUserInput
  }

  export type PostinganCreateWithoutUserInput = {
    tanggal?: Date | string
    postingId: string
    Content: ContentCreateNestedOneWithoutPostinganInput
    UserGroup: UserGroupCreateNestedOneWithoutPostinganInput
  }

  export type PostinganUncheckedCreateWithoutUserInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    groupId: string
    postingId: string
  }

  export type PostinganCreateOrConnectWithoutUserInput = {
    where: PostinganWhereUniqueInput
    create: XOR<PostinganCreateWithoutUserInput, PostinganUncheckedCreateWithoutUserInput>
  }

  export type PostinganCreateManyUserInputEnvelope = {
    data: Enumerable<PostinganCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    data: string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    data: string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionBrowserCreateWithoutUserInput = {

  }

  export type SessionBrowserUncheckedCreateWithoutUserInput = {

  }

  export type SessionBrowserCreateOrConnectWithoutUserInput = {
    where: SessionBrowserWhereUniqueInput
    create: XOR<SessionBrowserCreateWithoutUserInput, SessionBrowserUncheckedCreateWithoutUserInput>
  }

  export type ShareKeBanyakCreateWithoutUserInput = {
    groupName: string
    tanggal: Date | string
  }

  export type ShareKeBanyakUncheckedCreateWithoutUserInput = {
    id?: number
    groupName: string
    tanggal: Date | string
  }

  export type ShareKeBanyakCreateOrConnectWithoutUserInput = {
    where: ShareKeBanyakWhereUniqueInput
    create: XOR<ShareKeBanyakCreateWithoutUserInput, ShareKeBanyakUncheckedCreateWithoutUserInput>
  }

  export type ShareKeBanyakCreateManyUserInputEnvelope = {
    data: Enumerable<ShareKeBanyakCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserGroupCreateWithoutUserInput = {
    groupId: string
    name: string
    url: string
    jualBeli?: boolean | null
    Postingan?: PostinganCreateNestedManyWithoutUserGroupInput
  }

  export type UserGroupUncheckedCreateWithoutUserInput = {
    groupId: string
    name: string
    url: string
    jualBeli?: boolean | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserGroupInput
  }

  export type UserGroupCreateOrConnectWithoutUserInput = {
    where: UserGroupWhereUniqueInput
    create: XOR<UserGroupCreateWithoutUserInput, UserGroupUncheckedCreateWithoutUserInput>
  }

  export type UserGroupCreateManyUserInputEnvelope = {
    data: Enumerable<UserGroupCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PostinganUpsertWithWhereUniqueWithoutUserInput = {
    where: PostinganWhereUniqueInput
    update: XOR<PostinganUpdateWithoutUserInput, PostinganUncheckedUpdateWithoutUserInput>
    create: XOR<PostinganCreateWithoutUserInput, PostinganUncheckedCreateWithoutUserInput>
  }

  export type PostinganUpdateWithWhereUniqueWithoutUserInput = {
    where: PostinganWhereUniqueInput
    data: XOR<PostinganUpdateWithoutUserInput, PostinganUncheckedUpdateWithoutUserInput>
  }

  export type PostinganUpdateManyWithWhereWithoutUserInput = {
    where: PostinganScalarWhereInput
    data: XOR<PostinganUpdateManyMutationInput, PostinganUncheckedUpdateManyWithoutPostinganInput>
  }

  export type SessionUpsertWithoutUserInput = {
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithoutUserInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    data?: StringFieldUpdateOperationsInput | string
  }

  export type SessionBrowserUpdateWithoutUserInput = {

  }

  export type SessionBrowserUncheckedUpdateWithoutUserInput = {

  }

  export type ShareKeBanyakUpsertWithWhereUniqueWithoutUserInput = {
    where: ShareKeBanyakWhereUniqueInput
    update: XOR<ShareKeBanyakUpdateWithoutUserInput, ShareKeBanyakUncheckedUpdateWithoutUserInput>
    create: XOR<ShareKeBanyakCreateWithoutUserInput, ShareKeBanyakUncheckedCreateWithoutUserInput>
  }

  export type ShareKeBanyakUpdateWithWhereUniqueWithoutUserInput = {
    where: ShareKeBanyakWhereUniqueInput
    data: XOR<ShareKeBanyakUpdateWithoutUserInput, ShareKeBanyakUncheckedUpdateWithoutUserInput>
  }

  export type ShareKeBanyakUpdateManyWithWhereWithoutUserInput = {
    where: ShareKeBanyakScalarWhereInput
    data: XOR<ShareKeBanyakUpdateManyMutationInput, ShareKeBanyakUncheckedUpdateManyWithoutShareKeBanyakInput>
  }

  export type ShareKeBanyakScalarWhereInput = {
    AND?: Enumerable<ShareKeBanyakScalarWhereInput>
    OR?: Enumerable<ShareKeBanyakScalarWhereInput>
    NOT?: Enumerable<ShareKeBanyakScalarWhereInput>
    id?: IntFilter | number
    groupName?: StringFilter | string
    tanggal?: DateTimeFilter | Date | string
    userId?: IntFilter | number
  }

  export type UserGroupUpsertWithWhereUniqueWithoutUserInput = {
    where: UserGroupWhereUniqueInput
    update: XOR<UserGroupUpdateWithoutUserInput, UserGroupUncheckedUpdateWithoutUserInput>
    create: XOR<UserGroupCreateWithoutUserInput, UserGroupUncheckedCreateWithoutUserInput>
  }

  export type UserGroupUpdateWithWhereUniqueWithoutUserInput = {
    where: UserGroupWhereUniqueInput
    data: XOR<UserGroupUpdateWithoutUserInput, UserGroupUncheckedUpdateWithoutUserInput>
  }

  export type UserGroupUpdateManyWithWhereWithoutUserInput = {
    where: UserGroupScalarWhereInput
    data: XOR<UserGroupUpdateManyMutationInput, UserGroupUncheckedUpdateManyWithoutUserGroupInput>
  }

  export type UserGroupScalarWhereInput = {
    AND?: Enumerable<UserGroupScalarWhereInput>
    OR?: Enumerable<UserGroupScalarWhereInput>
    NOT?: Enumerable<UserGroupScalarWhereInput>
    groupId?: StringFilter | string
    name?: StringFilter | string
    url?: StringFilter | string
    userId?: IntFilter | number
    jualBeli?: BoolNullableFilter | boolean | null
  }

  export type UserCreateWithoutUserGroupInput = {
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserGroupInput = {
    id?: number
    name: string
    email: string
    password: string
    active?: boolean
    desc?: string | null
    Postingan?: PostinganUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedCreateNestedOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserGroupInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserGroupInput, UserUncheckedCreateWithoutUserGroupInput>
  }

  export type PostinganCreateWithoutUserGroupInput = {
    tanggal?: Date | string
    postingId: string
    Content: ContentCreateNestedOneWithoutPostinganInput
    User: UserCreateNestedOneWithoutPostinganInput
  }

  export type PostinganUncheckedCreateWithoutUserGroupInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    userId: number
    postingId: string
  }

  export type PostinganCreateOrConnectWithoutUserGroupInput = {
    where: PostinganWhereUniqueInput
    create: XOR<PostinganCreateWithoutUserGroupInput, PostinganUncheckedCreateWithoutUserGroupInput>
  }

  export type PostinganCreateManyUserGroupInputEnvelope = {
    data: Enumerable<PostinganCreateManyUserGroupInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserGroupInput = {
    update: XOR<UserUpdateWithoutUserGroupInput, UserUncheckedUpdateWithoutUserGroupInput>
    create: XOR<UserCreateWithoutUserGroupInput, UserUncheckedCreateWithoutUserGroupInput>
  }

  export type UserUpdateWithoutUserGroupInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUpdateManyWithoutUserInput
    Session?: SessionUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUserGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserInput
    Session?: SessionUncheckedUpdateOneWithoutUserInput
    SessionBrowser?: SessionBrowserUncheckedUpdateOneWithoutUserInput
    ShareKeBanyak?: ShareKeBanyakUncheckedUpdateManyWithoutUserInput
  }

  export type PostinganUpsertWithWhereUniqueWithoutUserGroupInput = {
    where: PostinganWhereUniqueInput
    update: XOR<PostinganUpdateWithoutUserGroupInput, PostinganUncheckedUpdateWithoutUserGroupInput>
    create: XOR<PostinganCreateWithoutUserGroupInput, PostinganUncheckedCreateWithoutUserGroupInput>
  }

  export type PostinganUpdateWithWhereUniqueWithoutUserGroupInput = {
    where: PostinganWhereUniqueInput
    data: XOR<PostinganUpdateWithoutUserGroupInput, PostinganUncheckedUpdateWithoutUserGroupInput>
  }

  export type PostinganUpdateManyWithWhereWithoutUserGroupInput = {
    where: PostinganScalarWhereInput
    data: XOR<PostinganUpdateManyMutationInput, PostinganUncheckedUpdateManyWithoutPostinganInput>
  }

  export type GambarCreateManyContentInput = {
    id?: number
    destination: string
    filename: string
    path: string
  }

  export type PostinganCreateManyContentInput = {
    id?: number
    tanggal?: Date | string
    groupId: string
    userId: number
    postingId: string
  }

  export type GambarUpdateWithoutContentInput = {
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type GambarUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type GambarUncheckedUpdateManyWithoutGambarInput = {
    id?: IntFieldUpdateOperationsInput | number
    destination?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type PostinganUpdateWithoutContentInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    postingId?: StringFieldUpdateOperationsInput | string
    UserGroup?: UserGroupUpdateOneRequiredWithoutPostinganInput
    User?: UserUpdateOneRequiredWithoutPostinganInput
  }

  export type PostinganUncheckedUpdateWithoutContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type PostinganUncheckedUpdateManyWithoutPostinganInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    groupId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type PostinganCreateManyUserInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    groupId: string
    postingId: string
  }

  export type ShareKeBanyakCreateManyUserInput = {
    id?: number
    groupName: string
    tanggal: Date | string
  }

  export type UserGroupCreateManyUserInput = {
    groupId: string
    name: string
    url: string
    jualBeli?: boolean | null
  }

  export type PostinganUpdateWithoutUserInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    postingId?: StringFieldUpdateOperationsInput | string
    Content?: ContentUpdateOneRequiredWithoutPostinganInput
    UserGroup?: UserGroupUpdateOneRequiredWithoutPostinganInput
  }

  export type PostinganUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    contentId?: IntFieldUpdateOperationsInput | number
    groupId?: StringFieldUpdateOperationsInput | string
    postingId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareKeBanyakUpdateWithoutUserInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareKeBanyakUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareKeBanyakUncheckedUpdateManyWithoutShareKeBanyakInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserGroupUpdateWithoutUserInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Postingan?: PostinganUpdateManyWithoutUserGroupInput
  }

  export type UserGroupUncheckedUpdateWithoutUserInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Postingan?: PostinganUncheckedUpdateManyWithoutUserGroupInput
  }

  export type UserGroupUncheckedUpdateManyWithoutUserGroupInput = {
    groupId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    jualBeli?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PostinganCreateManyUserGroupInput = {
    id?: number
    tanggal?: Date | string
    contentId: number
    userId: number
    postingId: string
  }

  export type PostinganUpdateWithoutUserGroupInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    postingId?: StringFieldUpdateOperationsInput | string
    Content?: ContentUpdateOneRequiredWithoutPostinganInput
    User?: UserUpdateOneRequiredWithoutPostinganInput
  }

  export type PostinganUncheckedUpdateWithoutUserGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    contentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postingId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}